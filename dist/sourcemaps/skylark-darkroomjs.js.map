{"version":3,"sources":["skylark-darkroomjs.js"],"names":["define","skylark","langx","noder","finder","Widget","canvas2d","Plugins","computeImageViewPort","image","height","Math","abs","getWidth","sin","getAngle","PI","getHeight","cos","width","Toolbar","element","this","ButtonGroup","Button","prototype","createButtonGroup","options","buttonGroup","document","createElement","className","appendChild","createButton","mixin","type","group","hide","disabled","buttonElement","innerHTML","button","disable","addEventListener","eventName","listener","attachEvent","removeEventListener","active","value","classList","add","remove","Imager","inherit","klassName","_construct","el","plugins","find","_initializeDOM","overrided","containerElement","_initializeImage","_initializePlugins","refresh","initialize","bind","call","canvas","sourceCanvas","sourceImage","originalImageElement","transformations","minWidth","minHeight","maxWidth","maxHeight","ratio","backgroundColor","selfDestroy","container","Image","onload","parentNode","replaceChild","src","toDataURL","callback","getElement","dispatchEvent","event","createEvent","initEvent","next","clone","_replaceCurrentImage","newImage","selectable","viewport","canvasWidth","canvasHeight","canvasRatio","currentRatio","scaleMin","scaleX","scaleY","min","scale","max","setScaleX","setScaleY","setWidth","setHeight","centerObject","setCoords","applyTransformation","transformation","push","_postTransformation","reinitializeImage","_popTransformation","slice","length","shift","imageElement","mainContainerElement","toolbarElement","canvasContainerElement","canvasElement","sourceCanvasContainerElement","style","display","sourceCanvasElement","toolbar","Canvas","selection","evented","lockMovementX","lockMovementY","lockRotation","lockScalingX","lockScalingY","lockUniScaling","hasControls","hasBorders","name","pluginInfo","hasOwnProperty","ctor","Plugin","Evented","defaults","init","imager","Transformation","installPlugin","setting","attach","$","HistoryPlugin","undoTransformations","_initButtons","_onTranformationApplied","undo","lastTransformation","pop","unshift","_updateButtons","redo","cancelTransformation","backButton","forwardButton","images","Crop","snapshot","imageWidth","imageHeight","left","top","loaded","then","imgInstance","CropZone","util","createClass","Rect","_render","ctx","callSuper","flipX","flipY","fillStyle","_renderOverlay","undefined","setLineDash","mozDash","strokeStyle","_renderBorders","_renderGrid","lineDashOffset","x0","ceil","getLeft","x1","x2","x3","y0","getTop","y1","y2","y3","beginPath","moveTo","lineTo","closePath","fill","stroke","CropPlugin","startX","startY","isKeyCroping","isKeyLeft","isKeyUp","quickCropKey","cropButton","okButton","cancelButton","toggleCrop","cropCurrentZone","releaseFocus","on","onMouseDown","onMouseMove","onMouseUp","onObjectMoving","onObjectScaling","addListener","onKeyDown","onKeyUp","hasFocus","currentObject","target","cropZone","x","y","w","h","maxX","maxY","set","preventScaling","pointer","getPointer","e","minX","minY","lastScaleX","setLeft","lastScaleY","setTop","scaleToWidth","scaleToHeight","getScaleX","getScaleY","calcOffset","point","Point","activeObject","getActiveObject","containsPoint","discardActiveObject","onMouseMoveKeyCrop","_renderCropZone","zone","setActiveObject","keyCode","selectZone","forceDimension","requireFocus","bringToFront","originX","originY","cornerColor","cornerSize","transparentCorners","hasRotatingPoint","defaultCursor","fromX","fromY","toX","toY","isRight","isLeft","isDown","isUp","leftX","rightX","topY","bottomY","newWidth","newHeight","Rotation","angle","rotate","renderAll","RotatePlugin","leftButton","rightButton","rotateLeft","rotateRight","SavePlugin","destroyButton","main"],"mappings":"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","file":"../skylark-darkroomjs.js","sourcesContent":["define('skylark-darkroomjs/Imager',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils-dom/noder\",\r\n    \"skylark-utils-dom/finder\",\r\n    \"skylark-ui-swt/Widget\",\r\n    \"skylark-graphics-canvas2d\"\r\n], function(skylark, langx, noder,finder,Widget,canvas2d) {\r\n  'use strict';\r\n\r\n  var Plugins = {};\r\n\r\n  function computeImageViewPort(image) {\r\n    //return {\r\n    //  height : image.height,\r\n    //  width : image.width\r\n    //};\r\n    return {\r\n      height: Math.abs(image.getWidth() * (Math.sin(image.getAngle() * Math.PI/180))) + Math.abs(image.getHeight() * (Math.cos(image.getAngle() * Math.PI/180))),\r\n      width: Math.abs(image.getHeight() * (Math.sin(image.getAngle() * Math.PI/180))) + Math.abs(image.getWidth() * (Math.cos(image.getAngle() * Math.PI/180))),\r\n    }\r\n  }\r\n\r\n // Toolbar object.\r\n  function Toolbar(element) {\r\n    this.element = element;\r\n  }\r\n\r\n  Toolbar.prototype = {\r\n    createButtonGroup: function(options) {\r\n      var buttonGroup = document.createElement('div');\r\n      buttonGroup.className = 'darkroom-button-group';\r\n      this.element.appendChild(buttonGroup);\r\n\r\n      return new ButtonGroup(buttonGroup);\r\n    }\r\n  };\r\n\r\n  // ButtonGroup object.\r\n  function ButtonGroup(element) {\r\n    this.element = element;\r\n  }\r\n\r\n  ButtonGroup.prototype = {\r\n    createButton: function(options) {\r\n      var defaults = {\r\n        image: 'help',\r\n        type: 'default',\r\n        group: 'default',\r\n        hide: false,\r\n        disabled: false\r\n      };\r\n\r\n      options = langx.mixin({},defaults,options);\r\n\r\n      var buttonElement = document.createElement('button');\r\n      buttonElement.type = 'button';\r\n      buttonElement.className = 'darkroom-button darkroom-button-' + options.type;\r\n      buttonElement.innerHTML = '<svg class=\"darkroom-icon\"><use xlink:href=\"#' + options.image + '\" /></svg>';\r\n      this.element.appendChild(buttonElement);\r\n\r\n      var button = new Button(buttonElement);\r\n      button.hide(options.hide);\r\n      button.disable(options.disabled);\r\n\r\n      return button;\r\n    }\r\n  }\r\n\r\n  // Button object.\r\n  function Button(element) {\r\n    this.element = element;\r\n  }\r\n\r\n  Button.prototype = {\r\n    addEventListener: function(eventName, listener) {\r\n      if (this.element.addEventListener){\r\n        this.element.addEventListener(eventName, listener);\r\n      } else if (this.element.attachEvent) {\r\n        this.element.attachEvent('on' + eventName, listener);\r\n      }\r\n    },\r\n    removeEventListener: function(eventName, listener) {\r\n      if (this.element.removeEventListener){\r\n        this.element.removeEventListener(eventName, listener);\r\n      }\r\n    },\r\n    active: function(value) {\r\n      if (value)\r\n        this.element.classList.add('darkroom-button-active');\r\n      else\r\n        this.element.classList.remove('darkroom-button-active');\r\n    },\r\n    hide: function(value) {\r\n      if (value)\r\n        this.element.classList.add('darkroom-button-hidden');\r\n      else\r\n        this.element.classList.remove('darkroom-button-hidden');\r\n    },\r\n    disable: function(value) {\r\n      this.element.disabled = (value) ? true : false;\r\n    }\r\n  };\r\n\r\n  var Imager = Widget.inherit({\r\n    klassName : \"Imager\",\r\n\r\n    /*\r\n     * @param {Element} el The container element. \r\n     */\r\n    _construct : function(el,options,plugins) {\r\n      if (typeof el === 'string') {\r\n        el = finder.find(el);\r\n      }\r\n\r\n      this._initializeDOM(el);\r\n      this.overrided(this.containerElement,options);\r\n      //this.options = langx.mixin({}, this.defaults,options);\r\n\r\n      // List of the instancied plugins\r\n      this.plugins = {};\r\n\r\n//      var image = new Image();\r\n//      image.onload = function() {\r\n        // Initialize the DOM/canvas2d elements\r\n        this._initializeImage();\r\n\r\n        // Then initialize the plugins\r\n        this._initializePlugins();\r\n\r\n        // Public method to adjust image according to the canvas\r\n        this.refresh(function() {\r\n          // Execute a custom callback after initialization\r\n          this.options.initialize.bind(this).call();\r\n        }.bind(this));\r\n\r\n  //    }.bind(this)\r\n\r\n      //image.crossOrigin = 'anonymous';\r\n      //image.src = el.src;\r\n    },\r\n\r\n    // Reference to the main container element\r\n    containerElement: null,\r\n\r\n    // Reference to the canvas2d canvas object\r\n    canvas: null,\r\n\r\n    // Reference to the canvas2d image object\r\n    image: null,\r\n\r\n    // Reference to the canvas2d source canvas object\r\n    sourceCanvas: null,\r\n\r\n    // Reference to the canvas2d source image object\r\n    sourceImage: null,\r\n\r\n    // Track of the original image element\r\n    originalImageElement: null,\r\n\r\n    // Stack of transformations to apply to the image source\r\n    transformations: [],\r\n\r\n    // Default options\r\n    options: {\r\n      // Canvas properties (dimension, ratio, color)\r\n      minWidth: null,\r\n      minHeight: null,\r\n      maxWidth: null,\r\n      maxHeight: null,\r\n      ratio: null,\r\n      backgroundColor: '#fff',\r\n\r\n      // Plugins options\r\n      plugins: {},\r\n\r\n      // Post-initialisation callback\r\n      initialize: function() { /* noop */ }\r\n    },\r\n\r\n\r\n\r\n    selfDestroy: function() {\r\n      var container = this.containerElement;\r\n      var image = new Image();\r\n      image.onload = function() {\r\n        container.parentNode.replaceChild(image, container);\r\n      }\r\n\r\n      image.src = this.sourceImage.toDataURL();\r\n    },\r\n\r\n    // Add ability to attach event listener on the core object.\r\n    // It uses the canvas element to process events.\r\n    addEventListener: function(eventName, callback) {\r\n      var el = this.canvas.getElement();\r\n      if (el.addEventListener){\r\n        el.addEventListener(eventName, callback);\r\n      } else if (el.attachEvent) {\r\n        el.attachEvent('on' + eventName, callback);\r\n      }\r\n    },\r\n\r\n    dispatchEvent: function(eventName) {\r\n      // Use the old way of creating event to be IE compatible\r\n      // See https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events\r\n      var event = document.createEvent('Event');\r\n      event.initEvent(eventName, true, true);\r\n\r\n      this.canvas.getElement().dispatchEvent(event);\r\n    },\r\n\r\n    // Adjust image & canvas dimension according to min/max width/height\r\n    // and ratio specified in the options.\r\n    // This method should be called after each image transformation.\r\n    refresh: function(next) {\r\n      var clone = new Image();\r\n      clone.onload = function() {\r\n        this._replaceCurrentImage(new canvas2d.Image(clone));\r\n\r\n        if (next) next();\r\n      }.bind(this);\r\n      clone.src = this.sourceImage.toDataURL();\r\n    },\r\n\r\n    _replaceCurrentImage: function(newImage) {\r\n      if (this.image) {\r\n        this.image.remove();\r\n      }\r\n\r\n      this.image = newImage;\r\n      this.image.selectable = false;\r\n\r\n      // Adjust width or height according to specified ratio\r\n      var viewport = computeImageViewPort(this.image);\r\n      var canvasWidth = viewport.width;\r\n      var canvasHeight = viewport.height;\r\n\r\n      if (null !== this.options.ratio) {\r\n        var canvasRatio = +this.options.ratio;\r\n        var currentRatio = canvasWidth / canvasHeight;\r\n\r\n        if (currentRatio > canvasRatio) {\r\n          canvasHeight = canvasWidth / canvasRatio;\r\n        } else if (currentRatio < canvasRatio) {\r\n          canvasWidth = canvasHeight * canvasRatio;\r\n        }\r\n      }\r\n\r\n      // Then scale the image to fit into dimension limits\r\n      var scaleMin = 1;\r\n      var scaleMax = 1;\r\n      var scaleX = 1;\r\n      var scaleY = 1;\r\n\r\n      if (null !== this.options.maxWidth && this.options.maxWidth < canvasWidth) {\r\n        scaleX =  this.options.maxWidth / canvasWidth;\r\n      }\r\n      if (null !== this.options.maxHeight && this.options.maxHeight < canvasHeight) {\r\n        scaleY =  this.options.maxHeight / canvasHeight;\r\n      }\r\n      scaleMin = Math.min(scaleX, scaleY);\r\n\r\n      scaleX = 1;\r\n      scaleY = 1;\r\n      if (null !== this.options.minWidth && this.options.minWidth > canvasWidth) {\r\n        scaleX =  this.options.minWidth / canvasWidth;\r\n      }\r\n      if (null !== this.options.minHeight && this.options.minHeight > canvasHeight) {\r\n        scaleY =  this.options.minHeight / canvasHeight;\r\n      }\r\n      scaleMax = Math.max(scaleX, scaleY);\r\n\r\n      var scale = scaleMax * scaleMin; // one should be equals to 1\r\n\r\n      canvasWidth *= scale;\r\n      canvasHeight *= scale;\r\n\r\n      // Finally place the image in the center of the canvas\r\n      this.image.setScaleX(1 * scale);\r\n      this.image.setScaleY(1 * scale);\r\n      this.canvas.add(this.image);\r\n      this.canvas.setWidth(canvasWidth);\r\n      this.canvas.setHeight(canvasHeight);\r\n      this.canvas.centerObject(this.image);\r\n      this.image.setCoords();\r\n    },\r\n\r\n    // Apply the transformation on the current image and save it in the\r\n    // transformations stack (in order to reconstitute the previous states\r\n    // of the image).\r\n    applyTransformation: function(transformation) {\r\n      this.transformations.push(transformation);\r\n\r\n      transformation.applyTransformation(\r\n        this.sourceCanvas,\r\n        this.sourceImage,\r\n        this._postTransformation.bind(this)\r\n      );\r\n    },\r\n\r\n    _postTransformation: function(newImage) {\r\n      if (newImage)\r\n        this.sourceImage = newImage;\r\n\r\n      this.refresh(function() {\r\n        this.dispatchEvent('core:transformation');\r\n      }.bind(this));\r\n    },\r\n\r\n    // Initialize image from original element plus re-apply every\r\n    // transformations.\r\n    reinitializeImage: function() {\r\n      this.sourceImage.remove();\r\n      this._initializeImage();\r\n      this._popTransformation(this.transformations.slice())\r\n    },\r\n\r\n    _popTransformation: function(transformations) {\r\n      if (0 === transformations.length) {\r\n        this.dispatchEvent('core:reinitialized');\r\n        this.refresh();\r\n        return;\r\n      }\r\n\r\n      var transformation = transformations.shift();\r\n\r\n      var next = function(newImage) {\r\n        if (newImage) this.sourceImage = newImage;\r\n        this._popTransformation(transformations)\r\n      };\r\n\r\n      transformation.applyTransformation(\r\n        this.sourceCanvas,\r\n        this.sourceImage,\r\n        next.bind(this)\r\n      );\r\n    },\r\n\r\n    // Create the DOM elements and instanciate the canvas2d canvas.\r\n    // The image element is replaced by a new `div` element.\r\n    // However the original image is re-injected in order to keep a trace of it.\r\n    _initializeDOM: function(imageElement) {\r\n      // Container\r\n      var mainContainerElement = document.createElement('div');\r\n      mainContainerElement.className = 'darkroom-container';\r\n\r\n      // Toolbar\r\n      var toolbarElement = document.createElement('div');\r\n      toolbarElement.className = 'darkroom-toolbar';\r\n      mainContainerElement.appendChild(toolbarElement);\r\n\r\n      // Viewport canvas\r\n      var canvasContainerElement = document.createElement('div');\r\n      canvasContainerElement.className = 'darkroom-image-container';\r\n      var canvasElement = this.canvasElement = document.createElement('canvas');\r\n      canvasContainerElement.appendChild(canvasElement);\r\n      mainContainerElement.appendChild(canvasContainerElement);\r\n\r\n      // Source canvas\r\n      var sourceCanvasContainerElement = document.createElement('div');\r\n      sourceCanvasContainerElement.className = 'darkroom-source-container';\r\n      sourceCanvasContainerElement.style.display = 'none';\r\n      var sourceCanvasElement = this.sourceCanvasElement = document.createElement('canvas');\r\n      sourceCanvasContainerElement.appendChild(sourceCanvasElement);\r\n      mainContainerElement.appendChild(sourceCanvasContainerElement);\r\n\r\n      // Original image\r\n      imageElement.parentNode.replaceChild(mainContainerElement, imageElement);\r\n      imageElement.style.display = 'none';\r\n      mainContainerElement.appendChild(imageElement);\r\n\r\n      // Instanciate object from elements\r\n      this.containerElement = mainContainerElement;\r\n      this.originalImageElement = imageElement;\r\n\r\n      this.toolbar = new Toolbar(toolbarElement);\r\n\r\n    },\r\n\r\n    // Instanciate the canvas2d image object.\r\n    // The image is created as a static element with no control,\r\n    // then it is add in the canvas2d canvas object.\r\n    _initializeImage: function() {\r\n      this.canvas = new canvas2d.Canvas(this.canvasElement, {\r\n        selection: false,\r\n        backgroundColor: this.options.backgroundColor\r\n      });\r\n\r\n      this.sourceCanvas = new canvas2d.Canvas(this.sourceCanvasElement, {\r\n        selection: false,\r\n        backgroundColor: this.options.backgroundColor\r\n      });\r\n \r\n      this.sourceImage = new canvas2d.Image(this.originalImageElement, {\r\n        // Some options to make the image static\r\n        selectable: false,\r\n        evented: false,\r\n        lockMovementX: true,\r\n        lockMovementY: true,\r\n        lockRotation: true,\r\n        lockScalingX: true,\r\n        lockScalingY: true,\r\n        lockUniScaling: true,\r\n        hasControls: false,\r\n        hasBorders: false,\r\n      });\r\n\r\n      this.sourceCanvas.add(this.sourceImage);\r\n\r\n      // Adjust width or height according to specified ratio\r\n      var viewport = computeImageViewPort(this.sourceImage);\r\n      var canvasWidth = viewport.width;\r\n      var canvasHeight = viewport.height;\r\n\r\n      this.sourceCanvas.setWidth(canvasWidth);\r\n      this.sourceCanvas.setHeight(canvasHeight);\r\n      this.sourceCanvas.centerObject(this.sourceImage);\r\n      this.sourceImage.setCoords();\r\n    },\r\n\r\n    // Initialize every plugins.\r\n    // Note that plugins are instanciated in the same order than they\r\n    // are declared in the parameter object.\r\n    _initializePlugins: function() {\r\n      for (var name in Plugins) {\r\n        var pluginInfo = Plugins[name];\r\n        var options = this.options.plugins[name];\r\n\r\n        // Setting false into the plugin options will disable the plugin\r\n        if (options === false)\r\n          continue;\r\n\r\n        // Avoid any issues with _proto_\r\n        if (!Plugins.hasOwnProperty(name))\r\n          continue;\r\n\r\n        this.plugins[name] = new pluginInfo.ctor(this, options);\r\n      }\r\n    }\r\n\r\n  });\r\n\r\n\r\n  Imager.Plugin = langx.Evented.inherit({\r\n    klassName : \"Plugin\",\r\n\r\n    defaults: {},\r\n\r\n    init : function(imager,options) {\r\n      this.imager = imager;\r\n      this.options = langx.mixin({},this.defaults,options);\r\n\r\n    }\r\n  });\r\n\r\n\r\n  Imager.Transformation = langx.Evented.inherit({\r\n    klassName : \"Transformation\",\r\n\r\n    init : function(options) {\r\n      this.options = options;\r\n    }\r\n  });\r\n\r\n\r\n  Imager.installPlugin = function(setting) {\r\n\r\n    //Plugins.push(setting);\r\n    Plugins[setting.name] = setting;\r\n  };\r\n\r\n  return skylark.attach(\"itg.darkroomjs.Imager\",Imager);\r\n\r\n});\r\n\r\n\ndefine('skylark-darkroomjs/plugins/history',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/query\",\r\n  \"skylark-graphics-canvas2d\",\r\n  '../Imager',\r\n],function(langx,noder, $, canvas2d,Imager) {\r\n  'use strict';\r\n\r\n  var HistoryPlugin= Imager.Plugin.inherit({\r\n     undoTransformations: null,\r\n\r\n     init : function(imager,options) {\r\n      this.overrided(imager,options);\r\n      this.undoTransformations = [];\r\n      this._initButtons();\r\n\r\n      this.imager.addEventListener('core:transformation', this._onTranformationApplied.bind(this));\r\n    },\r\n\r\n    undo: function() {\r\n      if (this.imager.transformations.length === 0) {\r\n        return;\r\n      }\r\n\r\n      var lastTransformation = this.imager.transformations.pop();\r\n      this.undoTransformations.unshift(lastTransformation);\r\n\r\n      this.imager.reinitializeImage();\r\n      this._updateButtons();\r\n    },\r\n\r\n    redo: function() {\r\n      if (this.undoTransformations.length === 0) {\r\n        return;\r\n      }\r\n\r\n      var cancelTransformation = this.undoTransformations.shift();\r\n      this.imager.transformations.push(cancelTransformation);\r\n\r\n      this.imager.reinitializeImage();\r\n      this._updateButtons();\r\n    },\r\n\r\n    _initButtons: function() {\r\n      var buttonGroup = this.imager.toolbar.createButtonGroup();\r\n\r\n      this.backButton = buttonGroup.createButton({\r\n        image: 'undo',\r\n        disabled: true\r\n      });\r\n\r\n      this.forwardButton = buttonGroup.createButton({\r\n        image: 'redo',\r\n        disabled: true\r\n      });\r\n\r\n      this.backButton.addEventListener('click', this.undo.bind(this));\r\n      this.forwardButton.addEventListener('click', this.redo.bind(this));\r\n\r\n      return this;\r\n    },\r\n\r\n    _updateButtons: function() {\r\n      this.backButton.disable((this.imager.transformations.length === 0))\r\n      this.forwardButton.disable((this.undoTransformations.length === 0))\r\n    },\r\n\r\n    _onTranformationApplied: function() {\r\n      this.undoTransformations = [];\r\n      this._updateButtons();\r\n    }\r\n  });\r\n\r\n  var pluginInfo = {\r\n    name : \"history\",\r\n    ctor : HistoryPlugin\r\n  };\r\n\r\n  Imager.installPlugin(pluginInfo);\r\n\r\n  return pluginInfo;\r\n\r\n  \r\n});\r\n\ndefine('skylark-darkroomjs/plugins/crop',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/images\",\r\n  \"skylark-utils-dom/query\",\r\n  \"skylark-graphics-canvas2d\",\r\n  '../Imager',\r\n],function(langx,noder, images,$, canvas2d,Imager) {\r\n  'use strict';\r\n\r\n  function computeImageViewPort(image) {\r\n    //return {\r\n    //  height : image.height,\r\n    //  width : image.width\r\n    //};\r\n    return {\r\n      height: Math.abs(image.getWidth() * (Math.sin(image.getAngle() * Math.PI/180))) + Math.abs(image.getHeight() * (Math.cos(image.getAngle() * Math.PI/180))),\r\n      width: Math.abs(image.getHeight() * (Math.sin(image.getAngle() * Math.PI/180))) + Math.abs(image.getWidth() * (Math.cos(image.getAngle() * Math.PI/180))),\r\n    }\r\n  }\r\n  \r\n\r\n  var Crop = Imager.Transformation.inherit({\r\n    applyTransformation: function(canvas, image, next) {\r\n      // Snapshot the image delimited by the crop zone\r\n      var snapshot = new Image();\r\n\r\n      var viewport = computeImageViewPort(image);\r\n      var imageWidth = viewport.width;\r\n      var imageHeight = viewport.height;\r\n\r\n      var left = this.options.left * imageWidth;\r\n      var top = this.options.top * imageHeight;\r\n      var width = Math.min(this.options.width * imageWidth, imageWidth - left);\r\n      var height = Math.min(this.options.height * imageHeight, imageHeight - top);\r\n\r\n      snapshot.src = canvas.toDataURL({\r\n        left: left,\r\n        top: top,\r\n        width: width,\r\n        height: height,\r\n      });\r\n\r\n      images.loaded(snapshot).then(function() {\r\n        // Validate image\r\n        if (height < 1 || width < 1)\r\n          return;\r\n\r\n        var imgInstance = new canvas2d.Image(snapshot, {\r\n          // options to make the image static\r\n          selectable: false,\r\n          evented: false,\r\n          lockMovementX: true,\r\n          lockMovementY: true,\r\n          lockRotation: true,\r\n          lockScalingX: true,\r\n          lockScalingY: true,\r\n          lockUniScaling: true,\r\n          hasControls: false,\r\n          hasBorders: false\r\n        });\r\n\r\n        var width = snapshot.width;\r\n        var height = snapshot.height;\r\n\r\n        // Update canvas size\r\n        canvas.setWidth(width);\r\n        canvas.setHeight(height);\r\n\r\n        // Add image\r\n        image.remove();\r\n        canvas.add(imgInstance);\r\n\r\n        next(imgInstance);\r\n      });\r\n    }\r\n  });\r\n\r\n  var CropZone = canvas2d.util.createClass(canvas2d.Rect, {\r\n    _render: function(ctx) {\r\n      this.callSuper('_render', ctx);\r\n\r\n      var canvas = ctx.canvas;\r\n      var dashWidth = 7;\r\n\r\n      // Set original scale\r\n      var flipX = this.flipX ? -1 : 1;\r\n      var flipY = this.flipY ? -1 : 1;\r\n      var scaleX = flipX / this.scaleX;\r\n      var scaleY = flipY / this.scaleY;\r\n\r\n      ctx.scale(scaleX, scaleY);\r\n\r\n      // Overlay rendering\r\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';\r\n      this._renderOverlay(ctx);\r\n\r\n      // Set dashed borders\r\n      if (ctx.setLineDash !== undefined)\r\n        ctx.setLineDash([dashWidth, dashWidth]);\r\n      else if (ctx.mozDash !== undefined)\r\n        ctx.mozDash = [dashWidth, dashWidth];\r\n\r\n      // First lines rendering with black\r\n      ctx.strokeStyle = 'rgba(0, 0, 0, 0.2)';\r\n      this._renderBorders(ctx);\r\n      this._renderGrid(ctx);\r\n\r\n      // Re render lines in white\r\n      ctx.lineDashOffset = dashWidth;\r\n      ctx.strokeStyle = 'rgba(255, 255, 255, 0.4)';\r\n      this._renderBorders(ctx);\r\n      this._renderGrid(ctx);\r\n\r\n      // Reset scale\r\n      ctx.scale(1/scaleX, 1/scaleY);\r\n    },\r\n\r\n    _renderOverlay: function(ctx) {\r\n      var canvas = ctx.canvas;\r\n\r\n      //\r\n      //    x0    x1        x2      x3\r\n      // y0 +------------------------+\r\n      //    |\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|\r\n      //    |\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|\r\n      // y1 +------+---------+-------+\r\n      //    |\\\\\\\\\\\\|         |\\\\\\\\\\\\\\|\r\n      //    |\\\\\\\\\\\\|    0    |\\\\\\\\\\\\\\|\r\n      //    |\\\\\\\\\\\\|         |\\\\\\\\\\\\\\|\r\n      // y2 +------+---------+-------+\r\n      //    |\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|\r\n      //    |\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|\r\n      // y3 +------------------------+\r\n      //\r\n\r\n      var x0 = Math.ceil(-this.getWidth() / 2 - this.getLeft());\r\n      var x1 = Math.ceil(-this.getWidth() / 2);\r\n      var x2 = Math.ceil(this.getWidth() / 2);\r\n      var x3 = Math.ceil(this.getWidth() / 2 + (canvas.width - this.getWidth() - this.getLeft()));\r\n\r\n      var y0 = Math.ceil(-this.getHeight() / 2 - this.getTop());\r\n      var y1 = Math.ceil(-this.getHeight() / 2);\r\n      var y2 = Math.ceil(this.getHeight() / 2);\r\n      var y3 = Math.ceil(this.getHeight() / 2 + (canvas.height - this.getHeight() - this.getTop()));\r\n\r\n      ctx.beginPath();\r\n      \r\n      // Draw outer rectangle.\r\n      // Numbers are +/-1 so that overlay edges don't get blurry.\r\n      ctx.moveTo(x0 - 1, y0 - 1);\r\n      ctx.lineTo(x3 + 1, y0 - 1);\r\n      ctx.lineTo(x3 + 1, y3 + 1);\r\n      ctx.lineTo(x0 - 1, y3 - 1);\r\n      ctx.lineTo(x0 - 1, y0 - 1);\r\n      ctx.closePath();\r\n\r\n      // Draw inner rectangle.\r\n      ctx.moveTo(x1, y1);\r\n      ctx.lineTo(x1, y2);\r\n      ctx.lineTo(x2, y2);\r\n      ctx.lineTo(x2, y1);\r\n      ctx.lineTo(x1, y1);\r\n\r\n      ctx.closePath();\r\n      ctx.fill();\r\n    },\r\n\r\n    _renderBorders: function(ctx) {\r\n      ctx.beginPath();\r\n      ctx.moveTo(-this.getWidth()/2, -this.getHeight()/2); // upper left\r\n      ctx.lineTo(this.getWidth()/2, -this.getHeight()/2); // upper right\r\n      ctx.lineTo(this.getWidth()/2, this.getHeight()/2); // down right\r\n      ctx.lineTo(-this.getWidth()/2, this.getHeight()/2); // down left\r\n      ctx.lineTo(-this.getWidth()/2, -this.getHeight()/2); // upper left\r\n      ctx.stroke();\r\n    },\r\n\r\n    _renderGrid: function(ctx) {\r\n      return;\r\n      // Vertical lines\r\n      ctx.beginPath();\r\n      ctx.moveTo(-this.getWidth()/2 + 1/3 * this.getWidth(), -this.getHeight()/2);\r\n      ctx.lineTo(-this.getWidth()/2 + 1/3 * this.getWidth(), this.getHeight()/2);\r\n      ctx.stroke();\r\n      ctx.beginPath();\r\n      ctx.moveTo(-this.getWidth()/2 + 2/3 * this.getWidth(), -this.getHeight()/2);\r\n      ctx.lineTo(-this.getWidth()/2 + 2/3 * this.getWidth(), this.getHeight()/2);\r\n      ctx.stroke();\r\n      // Horizontal lines\r\n      ctx.beginPath();\r\n      ctx.moveTo(-this.getWidth()/2, -this.getHeight()/2 + 1/3 * this.getHeight());\r\n      ctx.lineTo(this.getWidth()/2, -this.getHeight()/2 + 1/3 * this.getHeight());\r\n      ctx.stroke();\r\n      ctx.beginPath();\r\n      ctx.moveTo(-this.getWidth()/2, -this.getHeight()/2 + 2/3 * this.getHeight());\r\n      ctx.lineTo(this.getWidth()/2, -this.getHeight()/2 + 2/3 * this.getHeight());\r\n      ctx.stroke();\r\n    }\r\n  });\r\n\r\n  var CropPlugin = Imager.Plugin.inherit({\r\n    // Init point\r\n    startX: null,\r\n    startY: null,\r\n\r\n    // Keycrop\r\n    isKeyCroping: false,\r\n    isKeyLeft: false,\r\n    isKeyUp: false,\r\n\r\n    defaults: {\r\n      // min crop dimension\r\n      minHeight: 1,\r\n      minWidth: 1,\r\n      // ensure crop ratio\r\n      ratio: null,\r\n      // quick crop feature (set a key code to enable it)\r\n      quickCropKey: false\r\n    },\r\n\r\n     init : function(imager,options) {\r\n      this.overrided(imager,options);\r\n      var buttonGroup = this.imager.toolbar.createButtonGroup();\r\n\r\n      this.cropButton = buttonGroup.createButton({\r\n        image: 'crop'\r\n      });\r\n      this.okButton = buttonGroup.createButton({\r\n        image: 'done',\r\n        type: 'success',\r\n        hide: true\r\n      });\r\n      this.cancelButton = buttonGroup.createButton({\r\n        image: 'close',\r\n        type: 'danger',\r\n        hide: true\r\n      });\r\n\r\n      // Buttons click\r\n      this.cropButton.addEventListener('click', this.toggleCrop.bind(this));\r\n      this.okButton.addEventListener('click', this.cropCurrentZone.bind(this));\r\n      this.cancelButton.addEventListener('click', this.releaseFocus.bind(this));\r\n\r\n      // Canvas events\r\n      this.imager.canvas.on('mouse:down', this.onMouseDown.bind(this));\r\n      this.imager.canvas.on('mouse:move', this.onMouseMove.bind(this));\r\n      this.imager.canvas.on('mouse:up', this.onMouseUp.bind(this));\r\n      this.imager.canvas.on('object:moving', this.onObjectMoving.bind(this));\r\n      this.imager.canvas.on('object:scaling', this.onObjectScaling.bind(this));\r\n\r\n      canvas2d.util.addListener(document, 'keydown', this.onKeyDown.bind(this));\r\n      canvas2d.util.addListener(document, 'keyup', this.onKeyUp.bind(this));\r\n\r\n      this.imager.addEventListener('core:transformation', this.releaseFocus.bind(this));\r\n    },\r\n\r\n    // Avoid crop zone to go beyond the canvas edges\r\n    onObjectMoving: function(event) {\r\n      if (!this.hasFocus()) {\r\n        return;\r\n      }\r\n\r\n      var currentObject = event.target;\r\n      if (currentObject !== this.cropZone)\r\n        return;\r\n\r\n      var canvas = this.imager.canvas;\r\n      var x = currentObject.getLeft(), y = currentObject.getTop();\r\n      var w = currentObject.getWidth(), h = currentObject.getHeight();\r\n      var maxX = canvas.getWidth() - w;\r\n      var maxY = canvas.getHeight() - h;\r\n\r\n      if (x < 0)\r\n        currentObject.set('left', 0);\r\n      if (y < 0)\r\n        currentObject.set('top', 0);\r\n      if (x > maxX)\r\n        currentObject.set('left', maxX);\r\n      if (y > maxY)\r\n        currentObject.set('top', maxY);\r\n\r\n      this.imager.dispatchEvent('crop:update');\r\n    },\r\n\r\n    // Prevent crop zone from going beyond the canvas edges (like mouseMove)\r\n    onObjectScaling: function(event) {\r\n      if (!this.hasFocus()) {\r\n        return;\r\n      }\r\n\r\n      var preventScaling = false;\r\n      var currentObject = event.target;\r\n      if (currentObject !== this.cropZone)\r\n        return;\r\n\r\n      var canvas = this.imager.canvas;\r\n      var pointer = canvas.getPointer(event.e);\r\n      var x = pointer.x;\r\n      var y = pointer.y;\r\n\r\n      var minX = currentObject.getLeft();\r\n      var minY = currentObject.getTop();\r\n      var maxX = currentObject.getLeft() + currentObject.getWidth();\r\n      var maxY = currentObject.getTop() + currentObject.getHeight();\r\n\r\n      if (null !== this.options.ratio) {\r\n        if (minX < 0 || maxX > canvas.getWidth() || minY < 0 || maxY > canvas.getHeight()) {\r\n          preventScaling = true;\r\n        }\r\n      }\r\n\r\n      if (minX < 0 || maxX > canvas.getWidth() || preventScaling) {\r\n        var lastScaleX = this.lastScaleX || 1;\r\n        currentObject.setScaleX(lastScaleX);\r\n      }\r\n      if (minX < 0) {\r\n        currentObject.setLeft(0);\r\n      }\r\n\r\n      if (minY < 0 || maxY > canvas.getHeight() || preventScaling) {\r\n        var lastScaleY = this.lastScaleY || 1;\r\n        currentObject.setScaleY(lastScaleY);\r\n      }\r\n      if (minY < 0) {\r\n        currentObject.setTop(0);\r\n      }\r\n\r\n      if (currentObject.getWidth() < this.options.minWidth) {\r\n        currentObject.scaleToWidth(this.options.minWidth);\r\n      }\r\n      if (currentObject.getHeight() < this.options.minHeight) {\r\n        currentObject.scaleToHeight(this.options.minHeight);\r\n      }\r\n\r\n      this.lastScaleX = currentObject.getScaleX();\r\n      this.lastScaleY = currentObject.getScaleY();\r\n\r\n      this.imager.dispatchEvent('crop:update');\r\n    },\r\n\r\n    // Init crop zone\r\n    onMouseDown: function(event) {\r\n      if (!this.hasFocus()) {\r\n        return;\r\n      }\r\n\r\n      var canvas = this.imager.canvas;\r\n\r\n      // recalculate offset, in case canvas was manipulated since last `calcOffset`\r\n      canvas.calcOffset();\r\n      var pointer = canvas.getPointer(event.e);\r\n      var x = pointer.x;\r\n      var y = pointer.y;\r\n      var point = new canvas2d.Point(x, y);\r\n\r\n      // Check if user want to scale or drag the crop zone.\r\n      var activeObject = canvas.getActiveObject();\r\n      if (activeObject === this.cropZone || this.cropZone.containsPoint(point)) {\r\n        return;\r\n      }\r\n\r\n      canvas.discardActiveObject();\r\n      this.cropZone.setWidth(0);\r\n      this.cropZone.setHeight(0);\r\n      this.cropZone.setScaleX(1);\r\n      this.cropZone.setScaleY(1);\r\n\r\n      this.startX = x;\r\n      this.startY = y;\r\n    },\r\n\r\n    // Extend crop zone\r\n    onMouseMove: function(event) {\r\n      // Quick crop feature\r\n      if (this.isKeyCroping)\r\n        return this.onMouseMoveKeyCrop(event);\r\n\r\n      if (null === this.startX || null === this.startY) {\r\n        return;\r\n      }\r\n\r\n      var canvas = this.imager.canvas;\r\n      var pointer = canvas.getPointer(event.e);\r\n      var x = pointer.x;\r\n      var y = pointer.y;\r\n\r\n      this._renderCropZone(this.startX, this.startY, x, y);\r\n    },\r\n\r\n    onMouseMoveKeyCrop: function(event) {\r\n      var canvas = this.imager.canvas;\r\n      var zone = this.cropZone;\r\n\r\n      var pointer = canvas.getPointer(event.e);\r\n      var x = pointer.x;\r\n      var y = pointer.y;\r\n\r\n      if (!zone.left || !zone.top) {\r\n        zone.setTop(y);\r\n        zone.setLeft(x);\r\n      }\r\n\r\n      this.isKeyLeft =  x < zone.left + zone.width / 2 ;\r\n      this.isKeyUp = y < zone.top + zone.height / 2 ;\r\n\r\n      this._renderCropZone(\r\n        Math.min(zone.left, x),\r\n        Math.min(zone.top, y),\r\n        Math.max(zone.left+zone.width, x),\r\n        Math.max(zone.top+zone.height, y)\r\n      );\r\n    },\r\n\r\n    // Finish crop zone\r\n    onMouseUp: function(event) {\r\n      if (null === this.startX || null === this.startY) {\r\n        return;\r\n      }\r\n\r\n      var canvas = this.imager.canvas;\r\n      this.cropZone.setCoords();\r\n      canvas.setActiveObject(this.cropZone);\r\n      canvas.calcOffset();\r\n\r\n      this.startX = null;\r\n      this.startY = null;\r\n    },\r\n\r\n    onKeyDown: function(event) {\r\n      if (false === this.options.quickCropKey || event.keyCode !== this.options.quickCropKey || this.isKeyCroping)\r\n        return;\r\n\r\n      // Active quick crop flow\r\n      this.isKeyCroping = true ;\r\n      this.imager.canvas.discardActiveObject();\r\n      this.cropZone.setWidth(0);\r\n      this.cropZone.setHeight(0);\r\n      this.cropZone.setScaleX(1);\r\n      this.cropZone.setScaleY(1);\r\n      this.cropZone.setTop(0);\r\n      this.cropZone.setLeft(0);\r\n    },\r\n\r\n    onKeyUp: function(event) {\r\n      if (false === this.options.quickCropKey || event.keyCode !== this.options.quickCropKey || !this.isKeyCroping)\r\n        return;\r\n\r\n      // Unactive quick crop flow\r\n      this.isKeyCroping = false;\r\n      this.startX = 1;\r\n      this.startY = 1;\r\n      this.onMouseUp();\r\n    },\r\n\r\n    selectZone: function(x, y, width, height, forceDimension) {\r\n      if (!this.hasFocus())\r\n        this.requireFocus();\r\n\r\n      if (!forceDimension) {\r\n        this._renderCropZone(x, y, x+width, y+height);\r\n      } else {\r\n        this.cropZone.set({\r\n          'left': x,\r\n          'top': y,\r\n          'width': width,\r\n          'height': height\r\n        });\r\n      }\r\n\r\n      var canvas = this.imager.canvas;\r\n      canvas.bringToFront(this.cropZone);\r\n      this.cropZone.setCoords();\r\n      canvas.setActiveObject(this.cropZone);\r\n      canvas.calcOffset();\r\n\r\n      this.imager.dispatchEvent('crop:update');\r\n    },\r\n\r\n    toggleCrop: function() {\r\n      if (!this.hasFocus())\r\n        this.requireFocus();\r\n      else\r\n        this.releaseFocus();\r\n    },\r\n\r\n    cropCurrentZone: function() {\r\n      if (!this.hasFocus())\r\n        return;\r\n\r\n      // Avoid croping empty zone\r\n      if (this.cropZone.width < 1 && this.cropZone.height < 1)\r\n        return;\r\n\r\n      var image = this.imager.image;\r\n\r\n      // Compute crop zone dimensions\r\n      var top = this.cropZone.getTop() - image.getTop();\r\n      var left = this.cropZone.getLeft() - image.getLeft();\r\n      var width = this.cropZone.getWidth();\r\n      var height = this.cropZone.getHeight();\r\n\r\n      // Adjust dimensions to image only\r\n      if (top < 0) {\r\n        height += top;\r\n        top = 0;\r\n      }\r\n\r\n      if (left < 0) {\r\n        width += left;\r\n        left = 0;\r\n      }\r\n\r\n      // Apply crop transformation.\r\n      // Make sure to use relative dimension since the crop will be applied\r\n      // on the source image.\r\n      this.imager.applyTransformation(new Crop({\r\n        top: top / image.getHeight(),\r\n        left: left / image.getWidth(),\r\n        width: width / image.getWidth(),\r\n        height: height / image.getHeight(),\r\n      }));\r\n    },\r\n\r\n    // Test wether crop zone is set\r\n    hasFocus: function() {\r\n      return this.cropZone !== undefined;\r\n    },\r\n\r\n    // Create the crop zone\r\n    requireFocus: function() {\r\n      this.cropZone = new CropZone({\r\n        fill: 'transparent',\r\n        hasBorders: false,\r\n        originX: 'left',\r\n        originY: 'top',\r\n        //stroke: '#444',\r\n        //strokeDashArray: [5, 5],\r\n        //borderColor: '#444',\r\n        cornerColor: '#444',\r\n        cornerSize: 8,\r\n        transparentCorners: false,\r\n        lockRotation: true,\r\n        hasRotatingPoint: false,\r\n      });\r\n\r\n      if (null !== this.options.ratio) {\r\n        this.cropZone.set('lockUniScaling', true);\r\n      }\r\n\r\n      this.imager.canvas.add(this.cropZone);\r\n      this.imager.canvas.defaultCursor = 'crosshair';\r\n\r\n      this.cropButton.active(true);\r\n      this.okButton.hide(false);\r\n      this.cancelButton.hide(false);\r\n    },\r\n\r\n    // Remove the crop zone\r\n    releaseFocus: function() {\r\n      if (undefined === this.cropZone)\r\n        return;\r\n\r\n      this.cropZone.remove();\r\n      this.cropZone = undefined;\r\n\r\n      this.cropButton.active(false);\r\n      this.okButton.hide(true);\r\n      this.cancelButton.hide(true);\r\n\r\n      this.imager.canvas.defaultCursor = 'default';\r\n\r\n      this.imager.dispatchEvent('crop:update');\r\n    },\r\n\r\n    _renderCropZone: function(fromX, fromY, toX, toY) {\r\n      var canvas = this.imager.canvas;\r\n\r\n      var isRight = (toX > fromX);\r\n      var isLeft = !isRight;\r\n      var isDown = (toY > fromY);\r\n      var isUp = !isDown;\r\n\r\n      var minWidth = Math.min(+this.options.minWidth, canvas.getWidth());\r\n      var minHeight = Math.min(+this.options.minHeight, canvas.getHeight());\r\n\r\n      // Define corner coordinates\r\n      var leftX = Math.min(fromX, toX);\r\n      var rightX = Math.max(fromX, toX);\r\n      var topY = Math.min(fromY, toY);\r\n      var bottomY = Math.max(fromY, toY);\r\n\r\n      // Replace current point into the canvas\r\n      leftX = Math.max(0, leftX);\r\n      rightX = Math.min(canvas.getWidth(), rightX);\r\n      topY = Math.max(0, topY)\r\n      bottomY = Math.min(canvas.getHeight(), bottomY);\r\n\r\n      // Recalibrate coordinates according to given options\r\n      if (rightX - leftX < minWidth) {\r\n        if (isRight)\r\n          rightX = leftX + minWidth;\r\n        else\r\n          leftX = rightX - minWidth;\r\n      }\r\n      if (bottomY - topY < minHeight) {\r\n        if (isDown)\r\n          bottomY = topY + minHeight;\r\n        else\r\n          topY = bottomY - minHeight;\r\n      }\r\n\r\n      // Truncate truncate according to canvas dimensions\r\n      if (leftX < 0) {\r\n        // Translate to the left\r\n        rightX += Math.abs(leftX);\r\n        leftX = 0\r\n      }\r\n      if (rightX > canvas.getWidth()) {\r\n        // Translate to the right\r\n        leftX -= (rightX - canvas.getWidth());\r\n        rightX = canvas.getWidth();\r\n      }\r\n      if (topY < 0) {\r\n        // Translate to the bottom\r\n        bottomY += Math.abs(topY);\r\n        topY = 0\r\n      }\r\n      if (bottomY > canvas.getHeight()) {\r\n        // Translate to the right\r\n        topY -= (bottomY - canvas.getHeight());\r\n        bottomY = canvas.getHeight();\r\n      }\r\n\r\n      var width = rightX - leftX;\r\n      var height = bottomY - topY;\r\n      var currentRatio = width / height;\r\n\r\n      if (this.options.ratio && +this.options.ratio !== currentRatio) {\r\n        var ratio = +this.options.ratio;\r\n\r\n        if(this.isKeyCroping) {\r\n          isLeft = this.isKeyLeft;\r\n          isUp = this.isKeyUp;\r\n        }\r\n\r\n        if (currentRatio < ratio) {\r\n          var newWidth = height * ratio;\r\n          if (isLeft) {\r\n            leftX -= (newWidth - width);\r\n          }\r\n          width = newWidth;\r\n        } else if (currentRatio > ratio) {\r\n          var newHeight = height / (ratio * height/width);\r\n          if (isUp) {\r\n            topY -= (newHeight - height);\r\n          }\r\n          height = newHeight;\r\n        }\r\n\r\n        if (leftX < 0) {\r\n          leftX = 0;\r\n          //TODO\r\n        }\r\n        if (topY < 0) {\r\n          topY = 0;\r\n          //TODO\r\n        }\r\n        if (leftX + width > canvas.getWidth()) {\r\n          var newWidth = canvas.getWidth() - leftX;\r\n          height = newWidth * height / width;\r\n          width = newWidth;\r\n          if (isUp) {\r\n            topY = fromY - height;\r\n          }\r\n        }\r\n        if (topY + height > canvas.getHeight()) {\r\n          var newHeight = canvas.getHeight() - topY;\r\n          width = width * newHeight / height;\r\n          height = newHeight;\r\n          if (isLeft) {\r\n            leftX = fromX - width;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Apply coordinates\r\n      this.cropZone.left = leftX;\r\n      this.cropZone.top = topY;\r\n      this.cropZone.width = width;\r\n      this.cropZone.height = height;\r\n\r\n      this.imager.canvas.bringToFront(this.cropZone);\r\n\r\n      this.imager.dispatchEvent('crop:update');\r\n    }\r\n  });\r\n\r\n  var pluginInfo = {\r\n    name : \"crop\",\r\n    ctor : CropPlugin\r\n  };\r\n\r\n  Imager.installPlugin(pluginInfo);\r\n\r\n  return pluginInfo;\r\n\r\n});\r\n\ndefine('skylark-darkroomjs/plugins/rotate',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/query\",\r\n  \"skylark-graphics-canvas2d\",\r\n  '../Imager',\r\n],function(langx,noder, $, canvas2d,Imager) {\r\n  'use strict';\r\n\r\nvar Rotation = Imager.Transformation.inherit({\r\n\r\n  applyTransformation: function(canvas, image, next) {\r\n    var angle = (image.getAngle() + this.options.angle) % 360;\r\n    image.rotate(angle);\r\n\r\n    var width, height;\r\n    height = Math.abs(image.getWidth()*(Math.sin(angle*Math.PI/180)))+Math.abs(image.getHeight()*(Math.cos(angle*Math.PI/180)));\r\n    width = Math.abs(image.getHeight()*(Math.sin(angle*Math.PI/180)))+Math.abs(image.getWidth()*(Math.cos(angle*Math.PI/180)));\r\n\r\n    canvas.setWidth(width);\r\n    canvas.setHeight(height);\r\n\r\n    canvas.centerObject(image);\r\n    image.setCoords();\r\n    canvas.renderAll();\r\n\r\n    next();\r\n  }\r\n});\r\n\r\n\r\n  var RotatePlugin = Imager.Plugin.inherit({\r\n    init: function(imager,options) {\r\n      this.overrided(imager,options);\r\n      var buttonGroup = this.imager.toolbar.createButtonGroup();\r\n\r\n      var leftButton = buttonGroup.createButton({\r\n        image: 'rotate-left'\r\n      });\r\n\r\n      var rightButton = buttonGroup.createButton({\r\n        image: 'rotate-right'\r\n      });\r\n\r\n      leftButton.addEventListener('click', this.rotateLeft.bind(this));\r\n      rightButton.addEventListener('click', this.rotateRight.bind(this));\r\n    },\r\n\r\n    rotateLeft: function() {\r\n      this.rotate(-90);\r\n    },\r\n\r\n    rotateRight: function() {\r\n      this.rotate(90);\r\n    },\r\n\r\n    rotate: function rotate(angle) {\r\n      this.imager.applyTransformation(\r\n        new Rotation({angle: angle})\r\n      );\r\n    }\r\n  });\r\n\r\n  var pluginInfo = {\r\n    name : \"rotate\",\r\n    ctor : RotatePlugin\r\n  };\r\n\r\n  Imager.installPlugin(pluginInfo);\r\n\r\n  return pluginInfo;\r\n\r\n});\r\n\ndefine('skylark-darkroomjs/plugins/save',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/query\",\r\n  \"skylark-graphics-canvas2d\",\r\n  '../Imager',\r\n],function(langx,noder, $, canvas2d,Imager) {\r\n  'use strict';\r\n\r\n  var SavePlugin= Imager.Plugin.inherit({\r\n\r\n    defaults: {\r\n      callback: function() {\r\n        this.imager.selfDestroy();\r\n      }\r\n    },\r\n\r\n    init: function(imager,options) {\r\n      this.overrided(imager,options);\r\n\r\n      var buttonGroup = this.imager.toolbar.createButtonGroup();\r\n\r\n      this.destroyButton = buttonGroup.createButton({\r\n        image: 'save'\r\n      });\r\n\r\n      this.destroyButton.addEventListener('click', this.options.callback.bind(this));\r\n    },\r\n  });\r\n\r\n  var pluginInfo = {\r\n    name : \"save\",\r\n    ctor : SavePlugin\r\n  };\r\n\r\n  Imager.installPlugin(pluginInfo);\r\n\r\n  return pluginInfo;  \r\n\r\n});\r\n\ndefine('skylark-darkroomjs/main',[\r\n    \"./Imager\",\r\n    \"./plugins/history\",\r\n    \"./plugins/crop\",\r\n    \"./plugins/rotate\",\r\n    \"./plugins/save\"\r\n], function(Imager) {\r\n    return Imager;\r\n})\r\n;\ndefine('skylark-darkroomjs', ['skylark-darkroomjs/main'], function (main) { return main; });\n\n"]}