{"version":3,"sources":["skylark-darkroomjs.js"],"names":["define","skylark","langx","noder","finder","Widget","fabric","Plugins","computeImageViewPort","image","height","Math","abs","getScaledWidth","sin","angle","PI","getScaledHeight","cos","width","Toolbar","element","this","ButtonGroup","Button","prototype","createButtonGroup","options","buttonGroup","document","createElement","className","appendChild","createButton","mixin","type","group","hide","disabled","buttonElement","innerHTML","button","disable","addEventListener","eventName","listener","attachEvent","removeEventListener","active","value","classList","add","remove","Darkroom","inherit","klassName","_construct","el","plugins","find","_initializeDOM","overrided","containerElement","_initializeImage","_initializePlugins","refresh","initialize","bind","call","canvas","sourceCanvas","sourceImage","originalImageElement","transformations","minWidth","minHeight","maxWidth","maxHeight","ratio","backgroundColor","selfDestroy","container","Image","onload","parentNode","replaceChild","src","toDataURL","callback","getElement","dispatchEvent","event","createEvent","initEvent","next","clone","_replaceCurrentImage","newImage","selectable","viewport","canvasWidth","canvasHeight","canvasRatio","currentRatio","scaleMin","scaleX","scaleY","min","scale","max","setWidth","setHeight","centerObject","setCoords","applyTransformation","transformation","push","_postTransformation","reinitializeImage","_popTransformation","slice","length","shift","imageElement","mainContainerElement","toolbarElement","canvasContainerElement","canvasElement","sourceCanvasContainerElement","style","display","sourceCanvasElement","toolbar","Canvas","selection","evented","lockMovementX","lockMovementY","lockRotation","lockScalingX","lockScalingY","lockUniScaling","hasControls","hasBorders","name","pluginInfo","hasOwnProperty","ctor","Plugin","Evented","defaults","init","Transformation","installPlugin","setting","attach","$","HistoryPlugin","undoTransformations","_initButtons","_onTranformationApplied","undo","lastTransformation","pop","unshift","_updateButtons","redo","cancelTransformation","backButton","forwardButton","images","Crop","snapshot","get","imageWidth","imageHeight","left","top","loaded","then","imgInstance","CropZone","util","createClass","Rect","_render","ctx","callSuper","flipX","flipY","_renderOverlay","undefined","setLineDash","mozDash","strokeStyle","_renderBorders","_renderGrid","lineDashOffset","x0","ceil","x1","x2","x3","y0","y1","y2","y3","beginPath","moveTo","lineTo","closePath","fill","stroke","CropPlugin","startX","startY","isKeyCroping","isKeyLeft","isKeyUp","quickCropKey","cropButton","okButton","cancelButton","toggleCrop","cropCurrentZone","releaseFocus","on","onMouseDown","onMouseMove","onMouseUp","onObjectMoving","onObjectScaling","addListener","onKeyDown","onKeyUp","hasFocus","currentObject","target","cropZone","x","y","w","h","maxX","getWidth","maxY","getHeight","set","preventScaling","pointer","getPointer","e","minX","minY","lastScaleX","setScaleX","setLeft","lastScaleY","setScaleY","setTop","scaleToWidth","scaleToHeight","calcOffset","point","Point","activeObject","getActiveObject","containsPoint","discardActiveObject","onMouseMoveKeyCrop","_renderCropZone","zone","setActiveObject","keyCode","selectZone","forceDimension","requireFocus","bringToFront","originX","originY","cornerColor","cornerSize","transparentCorners","hasRotatingPoint","defaultCursor","fromX","fromY","toX","toY","isRight","isLeft","isDown","isUp","leftX","rightX","topY","bottomY","newWidth","newHeight","Rotation","rotate","renderAll","RotatePlugin","leftButton","rightButton","rotateLeft","rotateRight","SavePlugin","destroyButton","main"],"mappings":"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","file":"../skylark-darkroomjs.js","sourcesContent":["define('skylark-darkroomjs/Darkroom',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-widgets-base/Widget\",\r\n    \"skylark-fabric\"\r\n], function(skylark, langx, noder,finder,Widget,fabric) {\r\n  'use strict';\r\n\r\n  var Plugins = {};\r\n\r\n  function computeImageViewPort(image) {\r\n    //return {\r\n    //  height : image.height,\r\n    //  width : image.width\r\n    //};\r\n    return {\r\n      height: Math.abs(image.getScaledWidth() * (Math.sin(image.angle * Math.PI/180))) + Math.abs(image.getScaledHeight() * (Math.cos(image.angle * Math.PI/180))),\r\n      width: Math.abs(image.getScaledHeight() * (Math.sin(image.angle * Math.PI/180))) + Math.abs(image.getScaledWidth() * (Math.cos(image.angle * Math.PI/180))),\r\n    }\r\n  }\r\n\r\n // Toolbar object.\r\n  function Toolbar(element) {\r\n    this.element = element;\r\n  }\r\n\r\n  Toolbar.prototype = {\r\n    createButtonGroup: function(options) {\r\n      var buttonGroup = document.createElement('div');\r\n      buttonGroup.className = 'darkroom-button-group';\r\n      this.element.appendChild(buttonGroup);\r\n\r\n      return new ButtonGroup(buttonGroup);\r\n    }\r\n  };\r\n\r\n  // ButtonGroup object.\r\n  function ButtonGroup(element) {\r\n    this.element = element;\r\n  }\r\n\r\n  ButtonGroup.prototype = {\r\n    createButton: function(options) {\r\n      var defaults = {\r\n        image: 'help',\r\n        type: 'default',\r\n        group: 'default',\r\n        hide: false,\r\n        disabled: false\r\n      };\r\n\r\n      options = langx.mixin({},defaults,options);\r\n\r\n      var buttonElement = document.createElement('button');\r\n      buttonElement.type = 'button';\r\n      buttonElement.className = 'darkroom-button darkroom-button-' + options.type;\r\n      buttonElement.innerHTML = '<svg class=\"darkroom-icon\"><use xlink:href=\"#' + options.image + '\" /></svg>';\r\n      this.element.appendChild(buttonElement);\r\n\r\n      var button = new Button(buttonElement);\r\n      button.hide(options.hide);\r\n      button.disable(options.disabled);\r\n\r\n      return button;\r\n    }\r\n  }\r\n\r\n  // Button object.\r\n  function Button(element) {\r\n    this.element = element;\r\n  }\r\n\r\n  Button.prototype = {\r\n    addEventListener: function(eventName, listener) {\r\n      if (this.element.addEventListener){\r\n        this.element.addEventListener(eventName, listener);\r\n      } else if (this.element.attachEvent) {\r\n        this.element.attachEvent('on' + eventName, listener);\r\n      }\r\n    },\r\n    removeEventListener: function(eventName, listener) {\r\n      if (this.element.removeEventListener){\r\n        this.element.removeEventListener(eventName, listener);\r\n      }\r\n    },\r\n    active: function(value) {\r\n      if (value)\r\n        this.element.classList.add('darkroom-button-active');\r\n      else\r\n        this.element.classList.remove('darkroom-button-active');\r\n    },\r\n    hide: function(value) {\r\n      if (value)\r\n        this.element.classList.add('darkroom-button-hidden');\r\n      else\r\n        this.element.classList.remove('darkroom-button-hidden');\r\n    },\r\n    disable: function(value) {\r\n      this.element.disabled = (value) ? true : false;\r\n    }\r\n  };\r\n\r\n  var Darkroom = Widget.inherit({\r\n    klassName : \"Darkroom\",\r\n\r\n    /*\r\n     * @param {Element} el The container element. \r\n     */\r\n    _construct : function(el,options,plugins) {\r\n      if (typeof el === 'string') {\r\n        el = finder.find(el);\r\n      }\r\n\r\n      this._initializeDOM(el);\r\n      this.overrided(this.containerElement,options);\r\n      //this.options = langx.mixin({}, this.defaults,options);\r\n\r\n      // List of the instancied plugins\r\n      this.plugins = {};\r\n\r\n//      var image = new Image();\r\n//      image.onload = function() {\r\n        // Initialize the DOM/fabric elements\r\n        this._initializeImage();\r\n\r\n        // Then initialize the plugins\r\n        this._initializePlugins();\r\n\r\n        // Public method to adjust image according to the canvas\r\n        this.refresh(function() {\r\n          // Execute a custom callback after initialization\r\n          this.options.initialize.bind(this).call();\r\n        }.bind(this));\r\n\r\n  //    }.bind(this)\r\n\r\n      //image.crossOrigin = 'anonymous';\r\n      //image.src = el.src;\r\n    },\r\n\r\n    // Reference to the main container element\r\n    containerElement: null,\r\n\r\n    // Reference to the fabric canvas object\r\n    canvas: null,\r\n\r\n    // Reference to the fabric image object\r\n    image: null,\r\n\r\n    // Reference to the fabric source canvas object\r\n    sourceCanvas: null,\r\n\r\n    // Reference to the fabric source image object\r\n    sourceImage: null,\r\n\r\n    // Track of the original image element\r\n    originalImageElement: null,\r\n\r\n    // Stack of transformations to apply to the image source\r\n    transformations: [],\r\n\r\n    // Default options\r\n    options: {\r\n      // Canvas properties (dimension, ratio, color)\r\n      minWidth: null,\r\n      minHeight: null,\r\n      maxWidth: null,\r\n      maxHeight: null,\r\n      ratio: null,\r\n      backgroundColor: '#fff',\r\n\r\n      // Plugins options\r\n      plugins: {},\r\n\r\n      // Post-initialisation callback\r\n      initialize: function() { /* noop */ }\r\n    },\r\n\r\n\r\n\r\n    selfDestroy: function() {\r\n      var container = this.containerElement;\r\n      var image = new Image();\r\n      image.onload = function() {\r\n        container.parentNode.replaceChild(image, container);\r\n      }\r\n\r\n      image.src = this.sourceImage.toDataURL();\r\n    },\r\n\r\n    // Add ability to attach event listener on the core object.\r\n    // It uses the canvas element to process events.\r\n    addEventListener: function(eventName, callback) {\r\n      var el = this.canvas.getElement();\r\n      if (el.addEventListener){\r\n        el.addEventListener(eventName, callback);\r\n      } else if (el.attachEvent) {\r\n        el.attachEvent('on' + eventName, callback);\r\n      }\r\n    },\r\n\r\n    dispatchEvent: function(eventName) {\r\n      // Use the old way of creating event to be IE compatible\r\n      // See https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events\r\n      var event = document.createEvent('Event');\r\n      event.initEvent(eventName, true, true);\r\n\r\n      this.canvas.getElement().dispatchEvent(event);\r\n    },\r\n\r\n    // Adjust image & canvas dimension according to min/max width/height\r\n    // and ratio specified in the options.\r\n    // This method should be called after each image transformation.\r\n    refresh: function(next) {\r\n      var clone = new Image();\r\n      clone.onload = function() {\r\n        this._replaceCurrentImage(new fabric.Image(clone));\r\n\r\n        if (next) next();\r\n      }.bind(this);\r\n      clone.src = this.sourceImage.toDataURL();\r\n    },\r\n\r\n    _replaceCurrentImage: function(newImage) {\r\n      if (this.image) {\r\n        this.image.canvas.remove(this.image);\r\n      }\r\n\r\n      this.image = newImage;\r\n      this.image.selectable = false;\r\n\r\n      // Adjust width or height according to specified ratio\r\n      var viewport = computeImageViewPort(this.image);\r\n      var canvasWidth = viewport.width;\r\n      var canvasHeight = viewport.height;\r\n\r\n      if (null !== this.options.ratio) {\r\n        var canvasRatio = +this.options.ratio;\r\n        var currentRatio = canvasWidth / canvasHeight;\r\n\r\n        if (currentRatio > canvasRatio) {\r\n          canvasHeight = canvasWidth / canvasRatio;\r\n        } else if (currentRatio < canvasRatio) {\r\n          canvasWidth = canvasHeight * canvasRatio;\r\n        }\r\n      }\r\n\r\n      // Then scale the image to fit into dimension limits\r\n      var scaleMin = 1;\r\n      var scaleMax = 1;\r\n      var scaleX = 1;\r\n      var scaleY = 1;\r\n\r\n      if (null !== this.options.maxWidth && this.options.maxWidth < canvasWidth) {\r\n        scaleX =  this.options.maxWidth / canvasWidth;\r\n      }\r\n      if (null !== this.options.maxHeight && this.options.maxHeight < canvasHeight) {\r\n        scaleY =  this.options.maxHeight / canvasHeight;\r\n      }\r\n      scaleMin = Math.min(scaleX, scaleY);\r\n\r\n      scaleX = 1;\r\n      scaleY = 1;\r\n      if (null !== this.options.minWidth && this.options.minWidth > canvasWidth) {\r\n        scaleX =  this.options.minWidth / canvasWidth;\r\n      }\r\n      if (null !== this.options.minHeight && this.options.minHeight > canvasHeight) {\r\n        scaleY =  this.options.minHeight / canvasHeight;\r\n      }\r\n      scaleMax = Math.max(scaleX, scaleY);\r\n\r\n      var scale = scaleMax * scaleMin; // one should be equals to 1\r\n\r\n      canvasWidth *= scale;\r\n      canvasHeight *= scale;\r\n\r\n      // Finally place the image in the center of the canvas\r\n      this.image.scaleX = (1 * scale);\r\n      this.image.scaleY = (1 * scale);\r\n      this.canvas.add(this.image);\r\n      this.canvas.setWidth(canvasWidth);\r\n      this.canvas.setHeight(canvasHeight);\r\n      this.canvas.centerObject(this.image);\r\n      this.image.setCoords();\r\n    },\r\n\r\n    // Apply the transformation on the current image and save it in the\r\n    // transformations stack (in order to reconstitute the previous states\r\n    // of the image).\r\n    applyTransformation: function(transformation) {\r\n      this.transformations.push(transformation);\r\n\r\n      transformation.applyTransformation(\r\n        this.sourceCanvas,\r\n        this.sourceImage,\r\n        this._postTransformation.bind(this)\r\n      );\r\n    },\r\n\r\n    _postTransformation: function(newImage) {\r\n      if (newImage)\r\n        this.sourceImage = newImage;\r\n\r\n      this.refresh(function() {\r\n        this.dispatchEvent('core:transformation');\r\n      }.bind(this));\r\n    },\r\n\r\n    // Initialize image from original element plus re-apply every\r\n    // transformations.\r\n    reinitializeImage: function() {\r\n      this.canvas.remove(this.sourceImage);\r\n      this._initializeImage();\r\n      this._popTransformation(this.transformations.slice())\r\n    },\r\n\r\n    _popTransformation: function(transformations) {\r\n      if (0 === transformations.length) {\r\n        this.dispatchEvent('core:reinitialized');\r\n        this.refresh();\r\n        return;\r\n      }\r\n\r\n      var transformation = transformations.shift();\r\n\r\n      var next = function(newImage) {\r\n        if (newImage) this.sourceImage = newImage;\r\n        this._popTransformation(transformations)\r\n      };\r\n\r\n      transformation.applyTransformation(\r\n        this.sourceCanvas,\r\n        this.sourceImage,\r\n        next.bind(this)\r\n      );\r\n    },\r\n\r\n    // Create the DOM elements and instanciate the fabric canvas.\r\n    // The image element is replaced by a new `div` element.\r\n    // However the original image is re-injected in order to keep a trace of it.\r\n    _initializeDOM: function(imageElement) {\r\n      // Container\r\n      var mainContainerElement = document.createElement('div');\r\n      mainContainerElement.className = 'darkroom-container';\r\n\r\n      // Toolbar\r\n      var toolbarElement = document.createElement('div');\r\n      toolbarElement.className = 'darkroom-toolbar';\r\n      mainContainerElement.appendChild(toolbarElement);\r\n\r\n      // Viewport canvas\r\n      var canvasContainerElement = document.createElement('div');\r\n      canvasContainerElement.className = 'darkroom-image-container';\r\n      var canvasElement = this.canvasElement = document.createElement('canvas');\r\n      canvasContainerElement.appendChild(canvasElement);\r\n      mainContainerElement.appendChild(canvasContainerElement);\r\n\r\n      // Source canvas\r\n      var sourceCanvasContainerElement = document.createElement('div');\r\n      sourceCanvasContainerElement.className = 'darkroom-source-container';\r\n      sourceCanvasContainerElement.style.display = 'none';\r\n      var sourceCanvasElement = this.sourceCanvasElement = document.createElement('canvas');\r\n      sourceCanvasContainerElement.appendChild(sourceCanvasElement);\r\n      mainContainerElement.appendChild(sourceCanvasContainerElement);\r\n\r\n      // Original image\r\n      imageElement.parentNode.replaceChild(mainContainerElement, imageElement);\r\n      imageElement.style.display = 'none';\r\n      mainContainerElement.appendChild(imageElement);\r\n\r\n      // Instanciate object from elements\r\n      this.containerElement = mainContainerElement;\r\n      this.originalImageElement = imageElement;\r\n\r\n      this.toolbar = new Toolbar(toolbarElement);\r\n\r\n    },\r\n\r\n    // Instanciate the fabric image object.\r\n    // The image is created as a static element with no control,\r\n    // then it is add in the fabric canvas object.\r\n    _initializeImage: function() {\r\n      this.canvas = new fabric.Canvas(this.canvasElement, {\r\n        selection: false,\r\n        backgroundColor: this.options.backgroundColor\r\n      });\r\n\r\n      this.sourceCanvas = new fabric.Canvas(this.sourceCanvasElement, {\r\n        selection: false,\r\n        backgroundColor: this.options.backgroundColor\r\n      });\r\n \r\n      this.sourceImage = new fabric.Image(this.originalImageElement, {\r\n        // Some options to make the image static\r\n        selectable: false,\r\n        evented: false,\r\n        lockMovementX: true,\r\n        lockMovementY: true,\r\n        lockRotation: true,\r\n        lockScalingX: true,\r\n        lockScalingY: true,\r\n        lockUniScaling: true,\r\n        hasControls: false,\r\n        hasBorders: false,\r\n      });\r\n\r\n      this.sourceCanvas.add(this.sourceImage);\r\n\r\n      // Adjust width or height according to specified ratio\r\n      var viewport = computeImageViewPort(this.sourceImage);\r\n      var canvasWidth = viewport.width;\r\n      var canvasHeight = viewport.height;\r\n\r\n      this.sourceCanvas.setWidth(canvasWidth);\r\n      this.sourceCanvas.setHeight(canvasHeight);\r\n      this.sourceCanvas.centerObject(this.sourceImage);\r\n      this.sourceImage.setCoords();\r\n    },\r\n\r\n    // Initialize every plugins.\r\n    // Note that plugins are instanciated in the same order than they\r\n    // are declared in the parameter object.\r\n    _initializePlugins: function() {\r\n      for (var name in Plugins) {\r\n        var pluginInfo = Plugins[name];\r\n        var options = this.options.plugins[name];\r\n\r\n        // Setting false into the plugin options will disable the plugin\r\n        if (options === false)\r\n          continue;\r\n\r\n        // Avoid any issues with _proto_\r\n        if (!Plugins.hasOwnProperty(name))\r\n          continue;\r\n\r\n        this.plugins[name] = new pluginInfo.ctor(this, options);\r\n      }\r\n    }\r\n\r\n  });\r\n\r\n\r\n  Darkroom.Plugin = langx.Evented.inherit({\r\n    klassName : \"Plugin\",\r\n\r\n    defaults: {},\r\n\r\n    init : function(Darkroom,options) {\r\n      this.Darkroom = Darkroom;\r\n      this.options = langx.mixin({},this.defaults,options);\r\n\r\n    }\r\n  });\r\n\r\n\r\n  Darkroom.Transformation = langx.Evented.inherit({\r\n    klassName : \"Transformation\",\r\n\r\n    init : function(options) {\r\n      this.options = options;\r\n    }\r\n  });\r\n\r\n\r\n  Darkroom.installPlugin = function(setting) {\r\n\r\n    //Plugins.push(setting);\r\n    Plugins[setting.name] = setting;\r\n  };\r\n\r\n  return skylark.attach(\"intg.Darkroom\",Darkroom);\r\n\r\n});\r\n\r\n\ndefine('skylark-darkroomjs/plugins/history',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-fabric\",\r\n  '../Darkroom',\r\n],function(langx,noder, $, fabric,Darkroom) {\r\n  'use strict';\r\n\r\n  var HistoryPlugin= Darkroom.Plugin.inherit({\r\n     undoTransformations: null,\r\n\r\n     init : function(Darkroom,options) {\r\n      this.overrided(Darkroom,options);\r\n      this.undoTransformations = [];\r\n      this._initButtons();\r\n\r\n      this.Darkroom.addEventListener('core:transformation', this._onTranformationApplied.bind(this));\r\n    },\r\n\r\n    undo: function() {\r\n      if (this.Darkroom.transformations.length === 0) {\r\n        return;\r\n      }\r\n\r\n      var lastTransformation = this.Darkroom.transformations.pop();\r\n      this.undoTransformations.unshift(lastTransformation);\r\n\r\n      this.Darkroom.reinitializeImage();\r\n      this._updateButtons();\r\n    },\r\n\r\n    redo: function() {\r\n      if (this.undoTransformations.length === 0) {\r\n        return;\r\n      }\r\n\r\n      var cancelTransformation = this.undoTransformations.shift();\r\n      this.Darkroom.transformations.push(cancelTransformation);\r\n\r\n      this.Darkroom.reinitializeImage();\r\n      this._updateButtons();\r\n    },\r\n\r\n    _initButtons: function() {\r\n      var buttonGroup = this.Darkroom.toolbar.createButtonGroup();\r\n\r\n      this.backButton = buttonGroup.createButton({\r\n        image: 'undo',\r\n        disabled: true\r\n      });\r\n\r\n      this.forwardButton = buttonGroup.createButton({\r\n        image: 'redo',\r\n        disabled: true\r\n      });\r\n\r\n      this.backButton.addEventListener('click', this.undo.bind(this));\r\n      this.forwardButton.addEventListener('click', this.redo.bind(this));\r\n\r\n      return this;\r\n    },\r\n\r\n    _updateButtons: function() {\r\n      this.backButton.disable((this.Darkroom.transformations.length === 0))\r\n      this.forwardButton.disable((this.undoTransformations.length === 0))\r\n    },\r\n\r\n    _onTranformationApplied: function() {\r\n      this.undoTransformations = [];\r\n      this._updateButtons();\r\n    }\r\n  });\r\n\r\n  var pluginInfo = {\r\n    name : \"history\",\r\n    ctor : HistoryPlugin\r\n  };\r\n\r\n  Darkroom.installPlugin(pluginInfo);\r\n\r\n  return pluginInfo;\r\n\r\n  \r\n});\r\n\ndefine('skylark-darkroomjs/plugins/crop',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-images\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-fabric\",\r\n  '../Darkroom',\r\n],function(langx,noder, images,$, fabric,Darkroom) {\r\n  'use strict';\r\n\r\n  function computeImageViewPort(image) {\r\n    //return {\r\n    //  height : image.height,\r\n    //  width : image.width\r\n    //};\r\n    return {\r\n      height: Math.abs(image.getScaledWidth() * (Math.sin(image.get(\"angle\") * Math.PI/180))) + Math.abs(image.getScaledHeight() * (Math.cos(image.get(\"angle\") * Math.PI/180))),\r\n      width: Math.abs(image.getScaledHeight() * (Math.sin(image.get(\"angle\") * Math.PI/180))) + Math.abs(image.getScaledWidth() * (Math.cos(image.get(\"angle\") * Math.PI/180))),\r\n    }\r\n  }\r\n  \r\n\r\n  var Crop = Darkroom.Transformation.inherit({\r\n    applyTransformation: function(canvas, image, next) {\r\n      // Snapshot the image delimited by the crop zone\r\n      var snapshot = new Image();\r\n\r\n      var viewport = computeImageViewPort(image);\r\n      var imageWidth = viewport.width;\r\n      var imageHeight = viewport.height;\r\n\r\n      var left = this.options.left * imageWidth;\r\n      var top = this.options.top * imageHeight;\r\n      var width = Math.min(this.options.width * imageWidth, imageWidth - left);\r\n      var height = Math.min(this.options.height * imageHeight, imageHeight - top);\r\n\r\n      snapshot.src = canvas.toDataURL({\r\n        left: left,\r\n        top: top,\r\n        width: width,\r\n        height: height,\r\n      });\r\n\r\n      images.loaded(snapshot).then(function() {\r\n        // Validate image\r\n        if (height < 1 || width < 1)\r\n          return;\r\n\r\n        var imgInstance = new fabric.Image(snapshot, {\r\n          // options to make the image static\r\n          selectable: false,\r\n          evented: false,\r\n          lockMovementX: true,\r\n          lockMovementY: true,\r\n          lockRotation: true,\r\n          lockScalingX: true,\r\n          lockScalingY: true,\r\n          lockUniScaling: true,\r\n          hasControls: false,\r\n          hasBorders: false\r\n        });\r\n\r\n        var width = snapshot.width;\r\n        var height = snapshot.height;\r\n\r\n        // Update canvas size\r\n        canvas.setWidth(width);\r\n        canvas.setHeight(height);\r\n\r\n        // Add image\r\n        canvas.remove(image);\r\n        canvas.add(imgInstance);\r\n\r\n        next(imgInstance);\r\n      });\r\n    }\r\n  });\r\n\r\n  var CropZone = fabric.util.createClass(fabric.Rect, {\r\n    _render: function(ctx) {\r\n      this.callSuper('_render', ctx);\r\n\r\n      var canvas = ctx.canvas;\r\n      var dashWidth = 7;\r\n\r\n      // Set original scale\r\n      var flipX = this.flipX ? -1 : 1;\r\n      var flipY = this.flipY ? -1 : 1;\r\n      var scaleX = flipX / this.scaleX;\r\n      var scaleY = flipY / this.scaleY;\r\n\r\n      ctx.scale(scaleX, scaleY);\r\n\r\n      // Overlay rendering\r\n      //ctx.fillStyle = 'rgba(0, 0, 0, 0.5)'; //modifeied by lwf\r\n      this._renderOverlay(ctx);\r\n\r\n      // Set dashed borders\r\n      if (ctx.setLineDash !== undefined)\r\n        ctx.setLineDash([dashWidth, dashWidth]);\r\n      else if (ctx.mozDash !== undefined)\r\n        ctx.mozDash = [dashWidth, dashWidth];\r\n\r\n      // First lines rendering with black\r\n      ctx.strokeStyle = 'rgba(0, 0, 0, 0.2)';\r\n      this._renderBorders(ctx);\r\n      this._renderGrid(ctx);\r\n\r\n      // Re render lines in white\r\n      ctx.lineDashOffset = dashWidth;\r\n      ctx.strokeStyle = 'rgba(255, 255, 255, 0.4)';\r\n      this._renderBorders(ctx);\r\n      this._renderGrid(ctx);\r\n\r\n      // Reset scale\r\n      ctx.scale(1/scaleX, 1/scaleY);\r\n    },\r\n\r\n    _renderOverlay: function(ctx) {\r\n      var canvas = ctx.canvas;\r\n\r\n      //\r\n      //    x0    x1        x2      x3\r\n      // y0 +------------------------+\r\n      //    |\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|\r\n      //    |\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|\r\n      // y1 +------+---------+-------+\r\n      //    |\\\\\\\\\\\\|         |\\\\\\\\\\\\\\|\r\n      //    |\\\\\\\\\\\\|    0    |\\\\\\\\\\\\\\|\r\n      //    |\\\\\\\\\\\\|         |\\\\\\\\\\\\\\|\r\n      // y2 +------+---------+-------+\r\n      //    |\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|\r\n      //    |\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|\r\n      // y3 +------------------------+\r\n      //\r\n\r\n      var x0 = Math.ceil(-this.getScaledWidth() / 2 - this.left);\r\n      var x1 = Math.ceil(-this.getScaledWidth() / 2);\r\n      var x2 = Math.ceil(this.getScaledWidth() / 2);\r\n      var x3 = Math.ceil(this.getScaledWidth() / 2 + (canvas.width - this.getScaledWidth() - this.left));\r\n\r\n      var y0 = Math.ceil(-this.getScaledHeight() / 2 - this.top);\r\n      var y1 = Math.ceil(-this.getScaledHeight() / 2);\r\n      var y2 = Math.ceil(this.getScaledHeight() / 2);\r\n      var y3 = Math.ceil(this.getScaledHeight() / 2 + (canvas.height - this.getScaledHeight() - this.top));\r\n\r\n      ctx.beginPath();\r\n      \r\n      // Draw outer rectangle.\r\n      // Numbers are +/-1 so that overlay edges don't get blurry.\r\n      ctx.moveTo(x0 - 1, y0 - 1);\r\n      ctx.lineTo(x3 + 1, y0 - 1);\r\n      ctx.lineTo(x3 + 1, y3 + 1);\r\n      ctx.lineTo(x0 - 1, y3 - 1);\r\n      ctx.lineTo(x0 - 1, y0 - 1);\r\n      ctx.closePath();\r\n\r\n      // Draw inner rectangle.\r\n      ctx.moveTo(x1, y1);\r\n      ctx.lineTo(x1, y2);\r\n      ctx.lineTo(x2, y2);\r\n      ctx.lineTo(x2, y1);\r\n      ctx.lineTo(x1, y1);\r\n\r\n      ctx.closePath();\r\n      ctx.fill();\r\n    },\r\n\r\n    _renderBorders: function(ctx) {\r\n      ctx.beginPath();\r\n      ctx.moveTo(-this.getScaledWidth()/2, -this.getScaledHeight()/2); // upper left\r\n      ctx.lineTo(this.getScaledWidth()/2, -this.getScaledHeight()/2); // upper right\r\n      ctx.lineTo(this.getScaledWidth()/2, this.getScaledHeight()/2); // down right\r\n      ctx.lineTo(-this.getScaledWidth()/2, this.getScaledHeight()/2); // down left\r\n      ctx.lineTo(-this.getScaledWidth()/2, -this.getScaledHeight()/2); // upper left\r\n      ctx.stroke();\r\n    },\r\n\r\n    _renderGrid: function(ctx) {\r\n      \r\n      // Vertical lines\r\n      ctx.beginPath();\r\n      ctx.moveTo(-this.getScaledWidth()/2 + 1/3 * this.getScaledWidth(), -this.getScaledHeight()/2);\r\n      ctx.lineTo(-this.getScaledWidth()/2 + 1/3 * this.getScaledWidth(), this.getScaledHeight()/2);\r\n      ctx.stroke();\r\n      ctx.beginPath();\r\n      ctx.moveTo(-this.getScaledWidth()/2 + 2/3 * this.getScaledWidth(), -this.getScaledHeight()/2);\r\n      ctx.lineTo(-this.getScaledWidth()/2 + 2/3 * this.getScaledWidth(), this.getScaledHeight()/2);\r\n      ctx.stroke();\r\n      // Horizontal lines\r\n      ctx.beginPath();\r\n      ctx.moveTo(-this.getScaledWidth()/2, -this.getScaledHeight()/2 + 1/3 * this.getScaledHeight());\r\n      ctx.lineTo(this.getScaledWidth()/2, -this.getScaledHeight()/2 + 1/3 * this.getScaledHeight());\r\n      ctx.stroke();\r\n      ctx.beginPath();\r\n      ctx.moveTo(-this.getScaledWidth()/2, -this.getScaledHeight()/2 + 2/3 * this.getScaledHeight());\r\n      ctx.lineTo(this.getScaledWidth()/2, -this.getScaledHeight()/2 + 2/3 * this.getScaledHeight());\r\n      ctx.stroke();\r\n    }\r\n  });\r\n\r\n  var CropPlugin = Darkroom.Plugin.inherit({\r\n    // Init point\r\n    startX: null,\r\n    startY: null,\r\n\r\n    // Keycrop\r\n    isKeyCroping: false,\r\n    isKeyLeft: false,\r\n    isKeyUp: false,\r\n\r\n    defaults: {\r\n      // min crop dimension\r\n      minHeight: 1,\r\n      minWidth: 1,\r\n      // ensure crop ratio\r\n      ratio: null,\r\n      // quick crop feature (set a key code to enable it)\r\n      quickCropKey: false\r\n    },\r\n\r\n     init : function(Darkroom,options) {\r\n      this.overrided(Darkroom,options);\r\n      var buttonGroup = this.Darkroom.toolbar.createButtonGroup();\r\n\r\n      this.cropButton = buttonGroup.createButton({\r\n        image: 'crop'\r\n      });\r\n      this.okButton = buttonGroup.createButton({\r\n        image: 'done',\r\n        type: 'success',\r\n        hide: true\r\n      });\r\n      this.cancelButton = buttonGroup.createButton({\r\n        image: 'close',\r\n        type: 'danger',\r\n        hide: true\r\n      });\r\n\r\n      // Buttons click\r\n      this.cropButton.addEventListener('click', this.toggleCrop.bind(this));\r\n      this.okButton.addEventListener('click', this.cropCurrentZone.bind(this));\r\n      this.cancelButton.addEventListener('click', this.releaseFocus.bind(this));\r\n\r\n      // Canvas events\r\n      this.Darkroom.canvas.on('mouse:down', this.onMouseDown.bind(this));\r\n      this.Darkroom.canvas.on('mouse:move', this.onMouseMove.bind(this));\r\n      this.Darkroom.canvas.on('mouse:up', this.onMouseUp.bind(this));\r\n      this.Darkroom.canvas.on('object:moving', this.onObjectMoving.bind(this));\r\n      this.Darkroom.canvas.on('object:scaling', this.onObjectScaling.bind(this));\r\n\r\n      fabric.util.addListener(document, 'keydown', this.onKeyDown.bind(this));\r\n      fabric.util.addListener(document, 'keyup', this.onKeyUp.bind(this));\r\n\r\n      this.Darkroom.addEventListener('core:transformation', this.releaseFocus.bind(this));\r\n    },\r\n\r\n    // Avoid crop zone to go beyond the canvas edges\r\n    onObjectMoving: function(event) {\r\n      if (!this.hasFocus()) {\r\n        return;\r\n      }\r\n\r\n      var currentObject = event.target;\r\n      if (currentObject !== this.cropZone)\r\n        return;\r\n\r\n      var canvas = this.Darkroom.canvas;\r\n      var x = currentObject.left, y = currentObject.top;\r\n      var w = currentObject.getScaledWidth(), h = currentObject.getScaledHeight();\r\n      var maxX = canvas.getWidth() - w;\r\n      var maxY = canvas.getHeight() - h;\r\n\r\n      if (x < 0)\r\n        currentObject.set('left', 0);\r\n      if (y < 0)\r\n        currentObject.set('top', 0);\r\n      if (x > maxX)\r\n        currentObject.set('left', maxX);\r\n      if (y > maxY)\r\n        currentObject.set('top', maxY);\r\n\r\n      this.Darkroom.dispatchEvent('crop:update');\r\n    },\r\n\r\n    // Prevent crop zone from going beyond the canvas edges (like mouseMove)\r\n    onObjectScaling: function(event) {\r\n      if (!this.hasFocus()) {\r\n        return;\r\n      }\r\n\r\n      var preventScaling = false;\r\n      var currentObject = event.target;\r\n      if (currentObject !== this.cropZone)\r\n        return;\r\n\r\n      var canvas = this.Darkroom.canvas;\r\n      var pointer = canvas.getPointer(event.e);\r\n      var x = pointer.x;\r\n      var y = pointer.y;\r\n\r\n      var minX = currentObject.left;\r\n      var minY = currentObject.top;\r\n      var maxX = currentObject.left + currentObject.getScaledWidth();\r\n      var maxY = currentObject.top + currentObject.getScaledHeight();\r\n\r\n      if (null !== this.options.ratio) {\r\n        if (minX < 0 || maxX > canvas.getWidth() || minY < 0 || maxY > canvas.getHeight()) {\r\n          preventScaling = true;\r\n        }\r\n      }\r\n\r\n      if (minX < 0 || maxX > canvas.getWidth() || preventScaling) {\r\n        var lastScaleX = this.lastScaleX || 1;\r\n        currentObject.setScaleX(lastScaleX);\r\n      }\r\n      if (minX < 0) {\r\n        currentObject.setLeft(0);\r\n      }\r\n\r\n      if (minY < 0 || maxY > canvas.getHeight() || preventScaling) {\r\n        var lastScaleY = this.lastScaleY || 1;\r\n        currentObject.setScaleY(lastScaleY);\r\n      }\r\n      if (minY < 0) {\r\n        currentObject.setTop(0);\r\n      }\r\n\r\n      if (currentObject.get(\"width\") < this.options.minWidth) {\r\n        currentObject.scaleToWidth(this.options.minWidth);\r\n      }\r\n      if (currentObject.get(\"height\") < this.options.minHeight) {\r\n        currentObject.scaleToHeight(this.options.minHeight);\r\n      }\r\n\r\n      this.lastScaleX = currentObject.get(\"scaleX\");\r\n      this.lastScaleY = currentObject.get(\"scaleY\");\r\n\r\n      this.Darkroom.dispatchEvent('crop:update');\r\n    },\r\n\r\n    // Init crop zone\r\n    onMouseDown: function(event) {\r\n      if (!this.hasFocus()) {\r\n        return;\r\n      }\r\n\r\n      var canvas = this.Darkroom.canvas;\r\n\r\n      // recalculate offset, in case canvas was manipulated since last `calcOffset`\r\n      canvas.calcOffset();\r\n      var pointer = canvas.getPointer(event.e);\r\n      var x = pointer.x;\r\n      var y = pointer.y;\r\n      var point = new fabric.Point(x, y);\r\n\r\n      // Check if user want to scale or drag the crop zone.\r\n      var activeObject = canvas.getActiveObject();\r\n      if (activeObject === this.cropZone || this.cropZone.containsPoint(point)) {\r\n        return;\r\n      }\r\n\r\n      canvas.discardActiveObject();\r\n      this.cropZone.set(\"width\",0);\r\n      this.cropZone.set(\"height\",0);\r\n      this.cropZone.set(\"scaleX\",1);\r\n      this.cropZone.set(\"scaleY\",1);\r\n\r\n      this.startX = x;\r\n      this.startY = y;\r\n    },\r\n\r\n    // Extend crop zone\r\n    onMouseMove: function(event) {\r\n      // Quick crop feature\r\n      if (this.isKeyCroping)\r\n        return this.onMouseMoveKeyCrop(event);\r\n\r\n      if (null === this.startX || null === this.startY) {\r\n        return;\r\n      }\r\n\r\n      var canvas = this.Darkroom.canvas;\r\n      var pointer = canvas.getPointer(event.e);\r\n      var x = pointer.x;\r\n      var y = pointer.y;\r\n\r\n      this._renderCropZone(this.startX, this.startY, x, y);\r\n    },\r\n\r\n    onMouseMoveKeyCrop: function(event) {\r\n      var canvas = this.Darkroom.canvas;\r\n      var zone = this.cropZone;\r\n\r\n      var pointer = canvas.getPointer(event.e);\r\n      var x = pointer.x;\r\n      var y = pointer.y;\r\n\r\n      if (!zone.left || !zone.top) {\r\n        zone.set(\"top\",y);\r\n        zone.set(\"left\",x);\r\n      }\r\n\r\n      this.isKeyLeft =  x < zone.left + zone.width / 2 ;\r\n      this.isKeyUp = y < zone.top + zone.height / 2 ;\r\n\r\n      this._renderCropZone(\r\n        Math.min(zone.left, x),\r\n        Math.min(zone.top, y),\r\n        Math.max(zone.left+zone.width, x),\r\n        Math.max(zone.top+zone.height, y)\r\n      );\r\n    },\r\n\r\n    // Finish crop zone\r\n    onMouseUp: function(event) {\r\n      if (null === this.startX || null === this.startY) {\r\n        return;\r\n      }\r\n\r\n      var canvas = this.Darkroom.canvas;\r\n      this.cropZone.setCoords();\r\n      canvas.setActiveObject(this.cropZone);\r\n      canvas.calcOffset();\r\n\r\n      this.startX = null;\r\n      this.startY = null;\r\n    },\r\n\r\n    onKeyDown: function(event) {\r\n      if (false === this.options.quickCropKey || event.keyCode !== this.options.quickCropKey || this.isKeyCroping)\r\n        return;\r\n\r\n      // Active quick crop flow\r\n      this.isKeyCroping = true ;\r\n      this.Darkroom.canvas.discardActiveObject();\r\n      this.cropZone.set(\"width\",0);\r\n      this.cropZone.set(\"height\",0);\r\n      this.cropZone.set(\"scaleX\",1);\r\n      this.cropZone.set(\"scaleY\",1);\r\n      this.cropZone.set(\"top\",0);\r\n      this.cropZone.set(\"left\",0);\r\n    },\r\n\r\n    onKeyUp: function(event) {\r\n      if (false === this.options.quickCropKey || event.keyCode !== this.options.quickCropKey || !this.isKeyCroping)\r\n        return;\r\n\r\n      // Unactive quick crop flow\r\n      this.isKeyCroping = false;\r\n      this.startX = 1;\r\n      this.startY = 1;\r\n      this.onMouseUp();\r\n    },\r\n\r\n    selectZone: function(x, y, width, height, forceDimension) {\r\n      if (!this.hasFocus())\r\n        this.requireFocus();\r\n\r\n      if (!forceDimension) {\r\n        this._renderCropZone(x, y, x+width, y+height);\r\n      } else {\r\n        this.cropZone.set({\r\n          'left': x,\r\n          'top': y,\r\n          'width': width,\r\n          'height': height\r\n        });\r\n      }\r\n\r\n      var canvas = this.Darkroom.canvas;\r\n      canvas.bringToFront(this.cropZone);\r\n      this.cropZone.setCoords();\r\n      canvas.setActiveObject(this.cropZone);\r\n      canvas.calcOffset();\r\n\r\n      this.Darkroom.dispatchEvent('crop:update');\r\n    },\r\n\r\n    toggleCrop: function() {\r\n      if (!this.hasFocus())\r\n        this.requireFocus();\r\n      else\r\n        this.releaseFocus();\r\n    },\r\n\r\n    cropCurrentZone: function() {\r\n      if (!this.hasFocus())\r\n        return;\r\n\r\n      // Avoid croping empty zone\r\n      if (this.cropZone.width < 1 && this.cropZone.height < 1)\r\n        return;\r\n\r\n      var image = this.Darkroom.image;\r\n\r\n      // Compute crop zone dimensions\r\n      var top = this.cropZone.get(\"top\") - image.get(\"top\");\r\n      var left = this.cropZone.get(\"left\") - image.get(\"left\");\r\n      var width = this.cropZone.get(\"width\");\r\n      var height = this.cropZone.get(\"height\");\r\n\r\n      // Adjust dimensions to image only\r\n      if (top < 0) {\r\n        height += top;\r\n        top = 0;\r\n      }\r\n\r\n      if (left < 0) {\r\n        width += left;\r\n        left = 0;\r\n      }\r\n\r\n      // Apply crop transformation.\r\n      // Make sure to use relative dimension since the crop will be applied\r\n      // on the source image.\r\n      this.Darkroom.applyTransformation(new Crop({\r\n        top: top / image.getScaledHeight(),\r\n        left: left / image.getScaledWidth(),\r\n        width: width / image.getScaledWidth(),\r\n        height: height / image.getScaledHeight(),\r\n      }));\r\n    },\r\n\r\n    // Test wether crop zone is set\r\n    hasFocus: function() {\r\n      return this.cropZone !== undefined;\r\n    },\r\n\r\n    // Create the crop zone\r\n    requireFocus: function() {\r\n      this.cropZone = new CropZone({\r\n        fill: 'transparent',\r\n        hasBorders: false,\r\n        originX: 'left',\r\n        originY: 'top',\r\n        //stroke: '#444',\r\n        //strokeDashArray: [5, 5],\r\n        //borderColor: '#444',\r\n        cornerColor: '#444',\r\n        cornerSize: 8,\r\n        transparentCorners: false,\r\n        lockRotation: true,\r\n        hasRotatingPoint: false,\r\n      });\r\n\r\n      if (null !== this.options.ratio) {\r\n        this.cropZone.set('lockUniScaling', true);\r\n      }\r\n\r\n      this.Darkroom.canvas.add(this.cropZone);\r\n      this.Darkroom.canvas.defaultCursor = 'crosshair';\r\n\r\n      this.cropButton.active(true);\r\n      this.okButton.hide(false);\r\n      this.cancelButton.hide(false);\r\n    },\r\n\r\n    // Remove the crop zone\r\n    releaseFocus: function() {\r\n      if (undefined === this.cropZone)\r\n        return;\r\n\r\n      this.cropZone.canvas.remove(this.cropZone);\r\n      this.cropZone = undefined;\r\n\r\n      this.cropButton.active(false);\r\n      this.okButton.hide(true);\r\n      this.cancelButton.hide(true);\r\n\r\n      this.Darkroom.canvas.defaultCursor = 'default';\r\n\r\n      this.Darkroom.dispatchEvent('crop:update');\r\n    },\r\n\r\n    _renderCropZone: function(fromX, fromY, toX, toY) {\r\n      var canvas = this.Darkroom.canvas;\r\n\r\n      var isRight = (toX > fromX);\r\n      var isLeft = !isRight;\r\n      var isDown = (toY > fromY);\r\n      var isUp = !isDown;\r\n\r\n      var minWidth = Math.min(+this.options.minWidth, canvas.getWidth());\r\n      var minHeight = Math.min(+this.options.minHeight, canvas.getHeight());\r\n\r\n      // Define corner coordinates\r\n      var leftX = Math.min(fromX, toX);\r\n      var rightX = Math.max(fromX, toX);\r\n      var topY = Math.min(fromY, toY);\r\n      var bottomY = Math.max(fromY, toY);\r\n\r\n      // Replace current point into the canvas\r\n      leftX = Math.max(0, leftX);\r\n      rightX = Math.min(canvas.getWidth(), rightX);\r\n      topY = Math.max(0, topY)\r\n      bottomY = Math.min(canvas.getHeight(), bottomY);\r\n\r\n      // Recalibrate coordinates according to given options\r\n      if (rightX - leftX < minWidth) {\r\n        if (isRight)\r\n          rightX = leftX + minWidth;\r\n        else\r\n          leftX = rightX - minWidth;\r\n      }\r\n      if (bottomY - topY < minHeight) {\r\n        if (isDown)\r\n          bottomY = topY + minHeight;\r\n        else\r\n          topY = bottomY - minHeight;\r\n      }\r\n\r\n      // Truncate truncate according to canvas dimensions\r\n      if (leftX < 0) {\r\n        // Translate to the left\r\n        rightX += Math.abs(leftX);\r\n        leftX = 0\r\n      }\r\n      if (rightX > canvas.getWidth()) {\r\n        // Translate to the right\r\n        leftX -= (rightX - canvas.getWidth());\r\n        rightX = canvas.getWidth();\r\n      }\r\n      if (topY < 0) {\r\n        // Translate to the bottom\r\n        bottomY += Math.abs(topY);\r\n        topY = 0\r\n      }\r\n      if (bottomY > canvas.getHeight()) {\r\n        // Translate to the right\r\n        topY -= (bottomY - canvas.getHeight());\r\n        bottomY = canvas.getHeight();\r\n      }\r\n\r\n      var width = rightX - leftX;\r\n      var height = bottomY - topY;\r\n      var currentRatio = width / height;\r\n\r\n      if (this.options.ratio && +this.options.ratio !== currentRatio) {\r\n        var ratio = +this.options.ratio;\r\n\r\n        if(this.isKeyCroping) {\r\n          isLeft = this.isKeyLeft;\r\n          isUp = this.isKeyUp;\r\n        }\r\n\r\n        if (currentRatio < ratio) {\r\n          var newWidth = height * ratio;\r\n          if (isLeft) {\r\n            leftX -= (newWidth - width);\r\n          }\r\n          width = newWidth;\r\n        } else if (currentRatio > ratio) {\r\n          var newHeight = height / (ratio * height/width);\r\n          if (isUp) {\r\n            topY -= (newHeight - height);\r\n          }\r\n          height = newHeight;\r\n        }\r\n\r\n        if (leftX < 0) {\r\n          leftX = 0;\r\n          //TODO\r\n        }\r\n        if (topY < 0) {\r\n          topY = 0;\r\n          //TODO\r\n        }\r\n        if (leftX + width > canvas.getWidth()) {\r\n          var newWidth = canvas.getWidth() - leftX;\r\n          height = newWidth * height / width;\r\n          width = newWidth;\r\n          if (isUp) {\r\n            topY = fromY - height;\r\n          }\r\n        }\r\n        if (topY + height > canvas.getHeight()) {\r\n          var newHeight = canvas.getHeight() - topY;\r\n          width = width * newHeight / height;\r\n          height = newHeight;\r\n          if (isLeft) {\r\n            leftX = fromX - width;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Apply coordinates\r\n      this.cropZone.left = leftX;\r\n      this.cropZone.top = topY;\r\n      this.cropZone.width = width;\r\n      this.cropZone.height = height;\r\n\r\n      this.Darkroom.canvas.bringToFront(this.cropZone);\r\n\r\n      this.Darkroom.dispatchEvent('crop:update');\r\n    }\r\n  });\r\n\r\n  var pluginInfo = {\r\n    name : \"crop\",\r\n    ctor : CropPlugin\r\n  };\r\n\r\n  Darkroom.installPlugin(pluginInfo);\r\n\r\n  return pluginInfo;\r\n\r\n});\r\n\ndefine('skylark-darkroomjs/plugins/rotate',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-fabric\",\r\n  '../Darkroom',\r\n],function(langx,noder, $, fabric,Darkroom) {\r\n  'use strict';\r\n\r\nvar Rotation = Darkroom.Transformation.inherit({\r\n\r\n  applyTransformation: function(canvas, image, next) {\r\n    var angle = (image.angle + this.options.angle) % 360;\r\n    image.rotate(angle);\r\n\r\n    var width, height;\r\n    height = Math.abs(image.getScaledWidth()*(Math.sin(angle*Math.PI/180)))+Math.abs(image.getScaledHeight()*(Math.cos(angle*Math.PI/180)));\r\n    width = Math.abs(image.getScaledHeight()*(Math.sin(angle*Math.PI/180)))+Math.abs(image.getScaledWidth()*(Math.cos(angle*Math.PI/180)));\r\n\r\n    canvas.setWidth(width);\r\n    canvas.setHeight(height);\r\n\r\n    canvas.centerObject(image);\r\n    image.setCoords();\r\n    canvas.renderAll();\r\n\r\n    next();\r\n  }\r\n});\r\n\r\n\r\n  var RotatePlugin = Darkroom.Plugin.inherit({\r\n    init: function(Darkroom,options) {\r\n      this.overrided(Darkroom,options);\r\n      var buttonGroup = this.Darkroom.toolbar.createButtonGroup();\r\n\r\n      var leftButton = buttonGroup.createButton({\r\n        image: 'rotate-left'\r\n      });\r\n\r\n      var rightButton = buttonGroup.createButton({\r\n        image: 'rotate-right'\r\n      });\r\n\r\n      leftButton.addEventListener('click', this.rotateLeft.bind(this));\r\n      rightButton.addEventListener('click', this.rotateRight.bind(this));\r\n    },\r\n\r\n    rotateLeft: function() {\r\n      this.rotate(-90);\r\n    },\r\n\r\n    rotateRight: function() {\r\n      this.rotate(90);\r\n    },\r\n\r\n    rotate: function rotate(angle) {\r\n      this.Darkroom.applyTransformation(\r\n        new Rotation({angle: angle})\r\n      );\r\n    }\r\n  });\r\n\r\n  var pluginInfo = {\r\n    name : \"rotate\",\r\n    ctor : RotatePlugin\r\n  };\r\n\r\n  Darkroom.installPlugin(pluginInfo);\r\n\r\n  return pluginInfo;\r\n\r\n});\r\n\ndefine('skylark-darkroomjs/plugins/save',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-fabric\",\r\n  '../Darkroom',\r\n],function(langx,noder, $, fabric,Darkroom) {\r\n  'use strict';\r\n\r\n  var SavePlugin= Darkroom.Plugin.inherit({\r\n\r\n    defaults: {\r\n      callback: function() {\r\n        this.Darkroom.selfDestroy();\r\n      }\r\n    },\r\n\r\n    init: function(Darkroom,options) {\r\n      this.overrided(Darkroom,options);\r\n\r\n      var buttonGroup = this.Darkroom.toolbar.createButtonGroup();\r\n\r\n      this.destroyButton = buttonGroup.createButton({\r\n        image: 'save'\r\n      });\r\n\r\n      this.destroyButton.addEventListener('click', this.options.callback.bind(this));\r\n    },\r\n  });\r\n\r\n  var pluginInfo = {\r\n    name : \"save\",\r\n    ctor : SavePlugin\r\n  };\r\n\r\n  Darkroom.installPlugin(pluginInfo);\r\n\r\n  return pluginInfo;  \r\n\r\n});\r\n\ndefine('skylark-darkroomjs/main',[\r\n    \"./Darkroom\",\r\n    \"./plugins/history\",\r\n    \"./plugins/crop\",\r\n    \"./plugins/rotate\",\r\n    \"./plugins/save\"\r\n], function(Darkroom) {\r\n    return Darkroom;\r\n})\r\n;\ndefine('skylark-darkroomjs', ['skylark-darkroomjs/main'], function (main) { return main; });\n\n"]}