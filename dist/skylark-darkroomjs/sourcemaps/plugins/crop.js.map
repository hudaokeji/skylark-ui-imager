{"version":3,"sources":["plugins/crop.js"],"names":["define","langx","noder","images","$","canvas2d","Imager","Crop","Transformation","inherit","applyTransformation","canvas","image","next","snapshot","Image","viewport","height","Math","abs","getWidth","sin","getAngle","PI","getHeight","cos","width","computeImageViewPort","imageWidth","imageHeight","left","this","options","top","min","src","toDataURL","loaded","then","imgInstance","selectable","evented","lockMovementX","lockMovementY","lockRotation","lockScalingX","lockScalingY","lockUniScaling","hasControls","hasBorders","setWidth","setHeight","remove","add","CropZone","util","createClass","Rect","_render","ctx","callSuper","flipX","flipY","scaleX","scaleY","scale","fillStyle","_renderOverlay","undefined","setLineDash","mozDash","strokeStyle","_renderBorders","_renderGrid","lineDashOffset","x0","ceil","getLeft","x1","x2","x3","y0","getTop","y1","y2","y3","beginPath","moveTo","lineTo","closePath","fill","stroke","pluginInfo","name","ctor","Plugin","startX","startY","isKeyCroping","isKeyLeft","isKeyUp","defaults","minHeight","minWidth","ratio","quickCropKey","init","imager","overrided","buttonGroup","toolbar","createButtonGroup","cropButton","createButton","okButton","type","hide","cancelButton","addEventListener","toggleCrop","bind","cropCurrentZone","releaseFocus","on","onMouseDown","onMouseMove","onMouseUp","onObjectMoving","onObjectScaling","addListener","document","onKeyDown","onKeyUp","event","hasFocus","currentObject","target","cropZone","x","y","w","h","maxX","maxY","set","dispatchEvent","preventScaling","pointer","getPointer","e","minX","minY","lastScaleX","setScaleX","setLeft","lastScaleY","setScaleY","setTop","scaleToWidth","scaleToHeight","getScaleX","getScaleY","calcOffset","point","Point","getActiveObject","containsPoint","discardActiveObject","onMouseMoveKeyCrop","_renderCropZone","zone","max","setCoords","setActiveObject","keyCode","selectZone","forceDimension","requireFocus","bringToFront","originX","originY","cornerColor","cornerSize","transparentCorners","hasRotatingPoint","defaultCursor","active","fromX","fromY","toX","toY","isRight","isLeft","isDown","isUp","leftX","rightX","topY","bottomY","currentRatio","newWidth","newHeight","installPlugin"],"mappings":"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","file":"../../plugins/crop.js","sourcesContent":["define([\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/images\",\r\n  \"skylark-utils-dom/query\",\r\n  \"skylark-graphics-canvas2d\",\r\n  '../Imager',\r\n],function(langx,noder, images,$, canvas2d,Imager) {\r\n  'use strict';\r\n\r\n  function computeImageViewPort(image) {\r\n    //return {\r\n    //  height : image.height,\r\n    //  width : image.width\r\n    //};\r\n    return {\r\n      height: Math.abs(image.getWidth() * (Math.sin(image.getAngle() * Math.PI/180))) + Math.abs(image.getHeight() * (Math.cos(image.getAngle() * Math.PI/180))),\r\n      width: Math.abs(image.getHeight() * (Math.sin(image.getAngle() * Math.PI/180))) + Math.abs(image.getWidth() * (Math.cos(image.getAngle() * Math.PI/180))),\r\n    }\r\n  }\r\n  \r\n\r\n  var Crop = Imager.Transformation.inherit({\r\n    applyTransformation: function(canvas, image, next) {\r\n      // Snapshot the image delimited by the crop zone\r\n      var snapshot = new Image();\r\n\r\n      var viewport = computeImageViewPort(image);\r\n      var imageWidth = viewport.width;\r\n      var imageHeight = viewport.height;\r\n\r\n      var left = this.options.left * imageWidth;\r\n      var top = this.options.top * imageHeight;\r\n      var width = Math.min(this.options.width * imageWidth, imageWidth - left);\r\n      var height = Math.min(this.options.height * imageHeight, imageHeight - top);\r\n\r\n      snapshot.src = canvas.toDataURL({\r\n        left: left,\r\n        top: top,\r\n        width: width,\r\n        height: height,\r\n      });\r\n\r\n      images.loaded(snapshot).then(function() {\r\n        // Validate image\r\n        if (height < 1 || width < 1)\r\n          return;\r\n\r\n        var imgInstance = new canvas2d.Image(snapshot, {\r\n          // options to make the image static\r\n          selectable: false,\r\n          evented: false,\r\n          lockMovementX: true,\r\n          lockMovementY: true,\r\n          lockRotation: true,\r\n          lockScalingX: true,\r\n          lockScalingY: true,\r\n          lockUniScaling: true,\r\n          hasControls: false,\r\n          hasBorders: false\r\n        });\r\n\r\n        var width = snapshot.width;\r\n        var height = snapshot.height;\r\n\r\n        // Update canvas size\r\n        canvas.setWidth(width);\r\n        canvas.setHeight(height);\r\n\r\n        // Add image\r\n        image.remove();\r\n        canvas.add(imgInstance);\r\n\r\n        next(imgInstance);\r\n      });\r\n    }\r\n  });\r\n\r\n  var CropZone = canvas2d.util.createClass(canvas2d.Rect, {\r\n    _render: function(ctx) {\r\n      this.callSuper('_render', ctx);\r\n\r\n      var canvas = ctx.canvas;\r\n      var dashWidth = 7;\r\n\r\n      // Set original scale\r\n      var flipX = this.flipX ? -1 : 1;\r\n      var flipY = this.flipY ? -1 : 1;\r\n      var scaleX = flipX / this.scaleX;\r\n      var scaleY = flipY / this.scaleY;\r\n\r\n      ctx.scale(scaleX, scaleY);\r\n\r\n      // Overlay rendering\r\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';\r\n      this._renderOverlay(ctx);\r\n\r\n      // Set dashed borders\r\n      if (ctx.setLineDash !== undefined)\r\n        ctx.setLineDash([dashWidth, dashWidth]);\r\n      else if (ctx.mozDash !== undefined)\r\n        ctx.mozDash = [dashWidth, dashWidth];\r\n\r\n      // First lines rendering with black\r\n      ctx.strokeStyle = 'rgba(0, 0, 0, 0.2)';\r\n      this._renderBorders(ctx);\r\n      this._renderGrid(ctx);\r\n\r\n      // Re render lines in white\r\n      ctx.lineDashOffset = dashWidth;\r\n      ctx.strokeStyle = 'rgba(255, 255, 255, 0.4)';\r\n      this._renderBorders(ctx);\r\n      this._renderGrid(ctx);\r\n\r\n      // Reset scale\r\n      ctx.scale(1/scaleX, 1/scaleY);\r\n    },\r\n\r\n    _renderOverlay: function(ctx) {\r\n      var canvas = ctx.canvas;\r\n\r\n      //\r\n      //    x0    x1        x2      x3\r\n      // y0 +------------------------+\r\n      //    |\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|\r\n      //    |\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|\r\n      // y1 +------+---------+-------+\r\n      //    |\\\\\\\\\\\\|         |\\\\\\\\\\\\\\|\r\n      //    |\\\\\\\\\\\\|    0    |\\\\\\\\\\\\\\|\r\n      //    |\\\\\\\\\\\\|         |\\\\\\\\\\\\\\|\r\n      // y2 +------+---------+-------+\r\n      //    |\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|\r\n      //    |\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|\r\n      // y3 +------------------------+\r\n      //\r\n\r\n      var x0 = Math.ceil(-this.getWidth() / 2 - this.getLeft());\r\n      var x1 = Math.ceil(-this.getWidth() / 2);\r\n      var x2 = Math.ceil(this.getWidth() / 2);\r\n      var x3 = Math.ceil(this.getWidth() / 2 + (canvas.width - this.getWidth() - this.getLeft()));\r\n\r\n      var y0 = Math.ceil(-this.getHeight() / 2 - this.getTop());\r\n      var y1 = Math.ceil(-this.getHeight() / 2);\r\n      var y2 = Math.ceil(this.getHeight() / 2);\r\n      var y3 = Math.ceil(this.getHeight() / 2 + (canvas.height - this.getHeight() - this.getTop()));\r\n\r\n      ctx.beginPath();\r\n      \r\n      // Draw outer rectangle.\r\n      // Numbers are +/-1 so that overlay edges don't get blurry.\r\n      ctx.moveTo(x0 - 1, y0 - 1);\r\n      ctx.lineTo(x3 + 1, y0 - 1);\r\n      ctx.lineTo(x3 + 1, y3 + 1);\r\n      ctx.lineTo(x0 - 1, y3 - 1);\r\n      ctx.lineTo(x0 - 1, y0 - 1);\r\n      ctx.closePath();\r\n\r\n      // Draw inner rectangle.\r\n      ctx.moveTo(x1, y1);\r\n      ctx.lineTo(x1, y2);\r\n      ctx.lineTo(x2, y2);\r\n      ctx.lineTo(x2, y1);\r\n      ctx.lineTo(x1, y1);\r\n\r\n      ctx.closePath();\r\n      ctx.fill();\r\n    },\r\n\r\n    _renderBorders: function(ctx) {\r\n      ctx.beginPath();\r\n      ctx.moveTo(-this.getWidth()/2, -this.getHeight()/2); // upper left\r\n      ctx.lineTo(this.getWidth()/2, -this.getHeight()/2); // upper right\r\n      ctx.lineTo(this.getWidth()/2, this.getHeight()/2); // down right\r\n      ctx.lineTo(-this.getWidth()/2, this.getHeight()/2); // down left\r\n      ctx.lineTo(-this.getWidth()/2, -this.getHeight()/2); // upper left\r\n      ctx.stroke();\r\n    },\r\n\r\n    _renderGrid: function(ctx) {\r\n      return;\r\n      // Vertical lines\r\n      ctx.beginPath();\r\n      ctx.moveTo(-this.getWidth()/2 + 1/3 * this.getWidth(), -this.getHeight()/2);\r\n      ctx.lineTo(-this.getWidth()/2 + 1/3 * this.getWidth(), this.getHeight()/2);\r\n      ctx.stroke();\r\n      ctx.beginPath();\r\n      ctx.moveTo(-this.getWidth()/2 + 2/3 * this.getWidth(), -this.getHeight()/2);\r\n      ctx.lineTo(-this.getWidth()/2 + 2/3 * this.getWidth(), this.getHeight()/2);\r\n      ctx.stroke();\r\n      // Horizontal lines\r\n      ctx.beginPath();\r\n      ctx.moveTo(-this.getWidth()/2, -this.getHeight()/2 + 1/3 * this.getHeight());\r\n      ctx.lineTo(this.getWidth()/2, -this.getHeight()/2 + 1/3 * this.getHeight());\r\n      ctx.stroke();\r\n      ctx.beginPath();\r\n      ctx.moveTo(-this.getWidth()/2, -this.getHeight()/2 + 2/3 * this.getHeight());\r\n      ctx.lineTo(this.getWidth()/2, -this.getHeight()/2 + 2/3 * this.getHeight());\r\n      ctx.stroke();\r\n    }\r\n  });\r\n\r\n  var CropPlugin = Imager.Plugin.inherit({\r\n    // Init point\r\n    startX: null,\r\n    startY: null,\r\n\r\n    // Keycrop\r\n    isKeyCroping: false,\r\n    isKeyLeft: false,\r\n    isKeyUp: false,\r\n\r\n    defaults: {\r\n      // min crop dimension\r\n      minHeight: 1,\r\n      minWidth: 1,\r\n      // ensure crop ratio\r\n      ratio: null,\r\n      // quick crop feature (set a key code to enable it)\r\n      quickCropKey: false\r\n    },\r\n\r\n     init : function(imager,options) {\r\n      this.overrided(imager,options);\r\n      var buttonGroup = this.imager.toolbar.createButtonGroup();\r\n\r\n      this.cropButton = buttonGroup.createButton({\r\n        image: 'crop'\r\n      });\r\n      this.okButton = buttonGroup.createButton({\r\n        image: 'done',\r\n        type: 'success',\r\n        hide: true\r\n      });\r\n      this.cancelButton = buttonGroup.createButton({\r\n        image: 'close',\r\n        type: 'danger',\r\n        hide: true\r\n      });\r\n\r\n      // Buttons click\r\n      this.cropButton.addEventListener('click', this.toggleCrop.bind(this));\r\n      this.okButton.addEventListener('click', this.cropCurrentZone.bind(this));\r\n      this.cancelButton.addEventListener('click', this.releaseFocus.bind(this));\r\n\r\n      // Canvas events\r\n      this.imager.canvas.on('mouse:down', this.onMouseDown.bind(this));\r\n      this.imager.canvas.on('mouse:move', this.onMouseMove.bind(this));\r\n      this.imager.canvas.on('mouse:up', this.onMouseUp.bind(this));\r\n      this.imager.canvas.on('object:moving', this.onObjectMoving.bind(this));\r\n      this.imager.canvas.on('object:scaling', this.onObjectScaling.bind(this));\r\n\r\n      canvas2d.util.addListener(document, 'keydown', this.onKeyDown.bind(this));\r\n      canvas2d.util.addListener(document, 'keyup', this.onKeyUp.bind(this));\r\n\r\n      this.imager.addEventListener('core:transformation', this.releaseFocus.bind(this));\r\n    },\r\n\r\n    // Avoid crop zone to go beyond the canvas edges\r\n    onObjectMoving: function(event) {\r\n      if (!this.hasFocus()) {\r\n        return;\r\n      }\r\n\r\n      var currentObject = event.target;\r\n      if (currentObject !== this.cropZone)\r\n        return;\r\n\r\n      var canvas = this.imager.canvas;\r\n      var x = currentObject.getLeft(), y = currentObject.getTop();\r\n      var w = currentObject.getWidth(), h = currentObject.getHeight();\r\n      var maxX = canvas.getWidth() - w;\r\n      var maxY = canvas.getHeight() - h;\r\n\r\n      if (x < 0)\r\n        currentObject.set('left', 0);\r\n      if (y < 0)\r\n        currentObject.set('top', 0);\r\n      if (x > maxX)\r\n        currentObject.set('left', maxX);\r\n      if (y > maxY)\r\n        currentObject.set('top', maxY);\r\n\r\n      this.imager.dispatchEvent('crop:update');\r\n    },\r\n\r\n    // Prevent crop zone from going beyond the canvas edges (like mouseMove)\r\n    onObjectScaling: function(event) {\r\n      if (!this.hasFocus()) {\r\n        return;\r\n      }\r\n\r\n      var preventScaling = false;\r\n      var currentObject = event.target;\r\n      if (currentObject !== this.cropZone)\r\n        return;\r\n\r\n      var canvas = this.imager.canvas;\r\n      var pointer = canvas.getPointer(event.e);\r\n      var x = pointer.x;\r\n      var y = pointer.y;\r\n\r\n      var minX = currentObject.getLeft();\r\n      var minY = currentObject.getTop();\r\n      var maxX = currentObject.getLeft() + currentObject.getWidth();\r\n      var maxY = currentObject.getTop() + currentObject.getHeight();\r\n\r\n      if (null !== this.options.ratio) {\r\n        if (minX < 0 || maxX > canvas.getWidth() || minY < 0 || maxY > canvas.getHeight()) {\r\n          preventScaling = true;\r\n        }\r\n      }\r\n\r\n      if (minX < 0 || maxX > canvas.getWidth() || preventScaling) {\r\n        var lastScaleX = this.lastScaleX || 1;\r\n        currentObject.setScaleX(lastScaleX);\r\n      }\r\n      if (minX < 0) {\r\n        currentObject.setLeft(0);\r\n      }\r\n\r\n      if (minY < 0 || maxY > canvas.getHeight() || preventScaling) {\r\n        var lastScaleY = this.lastScaleY || 1;\r\n        currentObject.setScaleY(lastScaleY);\r\n      }\r\n      if (minY < 0) {\r\n        currentObject.setTop(0);\r\n      }\r\n\r\n      if (currentObject.getWidth() < this.options.minWidth) {\r\n        currentObject.scaleToWidth(this.options.minWidth);\r\n      }\r\n      if (currentObject.getHeight() < this.options.minHeight) {\r\n        currentObject.scaleToHeight(this.options.minHeight);\r\n      }\r\n\r\n      this.lastScaleX = currentObject.getScaleX();\r\n      this.lastScaleY = currentObject.getScaleY();\r\n\r\n      this.imager.dispatchEvent('crop:update');\r\n    },\r\n\r\n    // Init crop zone\r\n    onMouseDown: function(event) {\r\n      if (!this.hasFocus()) {\r\n        return;\r\n      }\r\n\r\n      var canvas = this.imager.canvas;\r\n\r\n      // recalculate offset, in case canvas was manipulated since last `calcOffset`\r\n      canvas.calcOffset();\r\n      var pointer = canvas.getPointer(event.e);\r\n      var x = pointer.x;\r\n      var y = pointer.y;\r\n      var point = new canvas2d.Point(x, y);\r\n\r\n      // Check if user want to scale or drag the crop zone.\r\n      var activeObject = canvas.getActiveObject();\r\n      if (activeObject === this.cropZone || this.cropZone.containsPoint(point)) {\r\n        return;\r\n      }\r\n\r\n      canvas.discardActiveObject();\r\n      this.cropZone.setWidth(0);\r\n      this.cropZone.setHeight(0);\r\n      this.cropZone.setScaleX(1);\r\n      this.cropZone.setScaleY(1);\r\n\r\n      this.startX = x;\r\n      this.startY = y;\r\n    },\r\n\r\n    // Extend crop zone\r\n    onMouseMove: function(event) {\r\n      // Quick crop feature\r\n      if (this.isKeyCroping)\r\n        return this.onMouseMoveKeyCrop(event);\r\n\r\n      if (null === this.startX || null === this.startY) {\r\n        return;\r\n      }\r\n\r\n      var canvas = this.imager.canvas;\r\n      var pointer = canvas.getPointer(event.e);\r\n      var x = pointer.x;\r\n      var y = pointer.y;\r\n\r\n      this._renderCropZone(this.startX, this.startY, x, y);\r\n    },\r\n\r\n    onMouseMoveKeyCrop: function(event) {\r\n      var canvas = this.imager.canvas;\r\n      var zone = this.cropZone;\r\n\r\n      var pointer = canvas.getPointer(event.e);\r\n      var x = pointer.x;\r\n      var y = pointer.y;\r\n\r\n      if (!zone.left || !zone.top) {\r\n        zone.setTop(y);\r\n        zone.setLeft(x);\r\n      }\r\n\r\n      this.isKeyLeft =  x < zone.left + zone.width / 2 ;\r\n      this.isKeyUp = y < zone.top + zone.height / 2 ;\r\n\r\n      this._renderCropZone(\r\n        Math.min(zone.left, x),\r\n        Math.min(zone.top, y),\r\n        Math.max(zone.left+zone.width, x),\r\n        Math.max(zone.top+zone.height, y)\r\n      );\r\n    },\r\n\r\n    // Finish crop zone\r\n    onMouseUp: function(event) {\r\n      if (null === this.startX || null === this.startY) {\r\n        return;\r\n      }\r\n\r\n      var canvas = this.imager.canvas;\r\n      this.cropZone.setCoords();\r\n      canvas.setActiveObject(this.cropZone);\r\n      canvas.calcOffset();\r\n\r\n      this.startX = null;\r\n      this.startY = null;\r\n    },\r\n\r\n    onKeyDown: function(event) {\r\n      if (false === this.options.quickCropKey || event.keyCode !== this.options.quickCropKey || this.isKeyCroping)\r\n        return;\r\n\r\n      // Active quick crop flow\r\n      this.isKeyCroping = true ;\r\n      this.imager.canvas.discardActiveObject();\r\n      this.cropZone.setWidth(0);\r\n      this.cropZone.setHeight(0);\r\n      this.cropZone.setScaleX(1);\r\n      this.cropZone.setScaleY(1);\r\n      this.cropZone.setTop(0);\r\n      this.cropZone.setLeft(0);\r\n    },\r\n\r\n    onKeyUp: function(event) {\r\n      if (false === this.options.quickCropKey || event.keyCode !== this.options.quickCropKey || !this.isKeyCroping)\r\n        return;\r\n\r\n      // Unactive quick crop flow\r\n      this.isKeyCroping = false;\r\n      this.startX = 1;\r\n      this.startY = 1;\r\n      this.onMouseUp();\r\n    },\r\n\r\n    selectZone: function(x, y, width, height, forceDimension) {\r\n      if (!this.hasFocus())\r\n        this.requireFocus();\r\n\r\n      if (!forceDimension) {\r\n        this._renderCropZone(x, y, x+width, y+height);\r\n      } else {\r\n        this.cropZone.set({\r\n          'left': x,\r\n          'top': y,\r\n          'width': width,\r\n          'height': height\r\n        });\r\n      }\r\n\r\n      var canvas = this.imager.canvas;\r\n      canvas.bringToFront(this.cropZone);\r\n      this.cropZone.setCoords();\r\n      canvas.setActiveObject(this.cropZone);\r\n      canvas.calcOffset();\r\n\r\n      this.imager.dispatchEvent('crop:update');\r\n    },\r\n\r\n    toggleCrop: function() {\r\n      if (!this.hasFocus())\r\n        this.requireFocus();\r\n      else\r\n        this.releaseFocus();\r\n    },\r\n\r\n    cropCurrentZone: function() {\r\n      if (!this.hasFocus())\r\n        return;\r\n\r\n      // Avoid croping empty zone\r\n      if (this.cropZone.width < 1 && this.cropZone.height < 1)\r\n        return;\r\n\r\n      var image = this.imager.image;\r\n\r\n      // Compute crop zone dimensions\r\n      var top = this.cropZone.getTop() - image.getTop();\r\n      var left = this.cropZone.getLeft() - image.getLeft();\r\n      var width = this.cropZone.getWidth();\r\n      var height = this.cropZone.getHeight();\r\n\r\n      // Adjust dimensions to image only\r\n      if (top < 0) {\r\n        height += top;\r\n        top = 0;\r\n      }\r\n\r\n      if (left < 0) {\r\n        width += left;\r\n        left = 0;\r\n      }\r\n\r\n      // Apply crop transformation.\r\n      // Make sure to use relative dimension since the crop will be applied\r\n      // on the source image.\r\n      this.imager.applyTransformation(new Crop({\r\n        top: top / image.getHeight(),\r\n        left: left / image.getWidth(),\r\n        width: width / image.getWidth(),\r\n        height: height / image.getHeight(),\r\n      }));\r\n    },\r\n\r\n    // Test wether crop zone is set\r\n    hasFocus: function() {\r\n      return this.cropZone !== undefined;\r\n    },\r\n\r\n    // Create the crop zone\r\n    requireFocus: function() {\r\n      this.cropZone = new CropZone({\r\n        fill: 'transparent',\r\n        hasBorders: false,\r\n        originX: 'left',\r\n        originY: 'top',\r\n        //stroke: '#444',\r\n        //strokeDashArray: [5, 5],\r\n        //borderColor: '#444',\r\n        cornerColor: '#444',\r\n        cornerSize: 8,\r\n        transparentCorners: false,\r\n        lockRotation: true,\r\n        hasRotatingPoint: false,\r\n      });\r\n\r\n      if (null !== this.options.ratio) {\r\n        this.cropZone.set('lockUniScaling', true);\r\n      }\r\n\r\n      this.imager.canvas.add(this.cropZone);\r\n      this.imager.canvas.defaultCursor = 'crosshair';\r\n\r\n      this.cropButton.active(true);\r\n      this.okButton.hide(false);\r\n      this.cancelButton.hide(false);\r\n    },\r\n\r\n    // Remove the crop zone\r\n    releaseFocus: function() {\r\n      if (undefined === this.cropZone)\r\n        return;\r\n\r\n      this.cropZone.remove();\r\n      this.cropZone = undefined;\r\n\r\n      this.cropButton.active(false);\r\n      this.okButton.hide(true);\r\n      this.cancelButton.hide(true);\r\n\r\n      this.imager.canvas.defaultCursor = 'default';\r\n\r\n      this.imager.dispatchEvent('crop:update');\r\n    },\r\n\r\n    _renderCropZone: function(fromX, fromY, toX, toY) {\r\n      var canvas = this.imager.canvas;\r\n\r\n      var isRight = (toX > fromX);\r\n      var isLeft = !isRight;\r\n      var isDown = (toY > fromY);\r\n      var isUp = !isDown;\r\n\r\n      var minWidth = Math.min(+this.options.minWidth, canvas.getWidth());\r\n      var minHeight = Math.min(+this.options.minHeight, canvas.getHeight());\r\n\r\n      // Define corner coordinates\r\n      var leftX = Math.min(fromX, toX);\r\n      var rightX = Math.max(fromX, toX);\r\n      var topY = Math.min(fromY, toY);\r\n      var bottomY = Math.max(fromY, toY);\r\n\r\n      // Replace current point into the canvas\r\n      leftX = Math.max(0, leftX);\r\n      rightX = Math.min(canvas.getWidth(), rightX);\r\n      topY = Math.max(0, topY)\r\n      bottomY = Math.min(canvas.getHeight(), bottomY);\r\n\r\n      // Recalibrate coordinates according to given options\r\n      if (rightX - leftX < minWidth) {\r\n        if (isRight)\r\n          rightX = leftX + minWidth;\r\n        else\r\n          leftX = rightX - minWidth;\r\n      }\r\n      if (bottomY - topY < minHeight) {\r\n        if (isDown)\r\n          bottomY = topY + minHeight;\r\n        else\r\n          topY = bottomY - minHeight;\r\n      }\r\n\r\n      // Truncate truncate according to canvas dimensions\r\n      if (leftX < 0) {\r\n        // Translate to the left\r\n        rightX += Math.abs(leftX);\r\n        leftX = 0\r\n      }\r\n      if (rightX > canvas.getWidth()) {\r\n        // Translate to the right\r\n        leftX -= (rightX - canvas.getWidth());\r\n        rightX = canvas.getWidth();\r\n      }\r\n      if (topY < 0) {\r\n        // Translate to the bottom\r\n        bottomY += Math.abs(topY);\r\n        topY = 0\r\n      }\r\n      if (bottomY > canvas.getHeight()) {\r\n        // Translate to the right\r\n        topY -= (bottomY - canvas.getHeight());\r\n        bottomY = canvas.getHeight();\r\n      }\r\n\r\n      var width = rightX - leftX;\r\n      var height = bottomY - topY;\r\n      var currentRatio = width / height;\r\n\r\n      if (this.options.ratio && +this.options.ratio !== currentRatio) {\r\n        var ratio = +this.options.ratio;\r\n\r\n        if(this.isKeyCroping) {\r\n          isLeft = this.isKeyLeft;\r\n          isUp = this.isKeyUp;\r\n        }\r\n\r\n        if (currentRatio < ratio) {\r\n          var newWidth = height * ratio;\r\n          if (isLeft) {\r\n            leftX -= (newWidth - width);\r\n          }\r\n          width = newWidth;\r\n        } else if (currentRatio > ratio) {\r\n          var newHeight = height / (ratio * height/width);\r\n          if (isUp) {\r\n            topY -= (newHeight - height);\r\n          }\r\n          height = newHeight;\r\n        }\r\n\r\n        if (leftX < 0) {\r\n          leftX = 0;\r\n          //TODO\r\n        }\r\n        if (topY < 0) {\r\n          topY = 0;\r\n          //TODO\r\n        }\r\n        if (leftX + width > canvas.getWidth()) {\r\n          var newWidth = canvas.getWidth() - leftX;\r\n          height = newWidth * height / width;\r\n          width = newWidth;\r\n          if (isUp) {\r\n            topY = fromY - height;\r\n          }\r\n        }\r\n        if (topY + height > canvas.getHeight()) {\r\n          var newHeight = canvas.getHeight() - topY;\r\n          width = width * newHeight / height;\r\n          height = newHeight;\r\n          if (isLeft) {\r\n            leftX = fromX - width;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Apply coordinates\r\n      this.cropZone.left = leftX;\r\n      this.cropZone.top = topY;\r\n      this.cropZone.width = width;\r\n      this.cropZone.height = height;\r\n\r\n      this.imager.canvas.bringToFront(this.cropZone);\r\n\r\n      this.imager.dispatchEvent('crop:update');\r\n    }\r\n  });\r\n\r\n  var pluginInfo = {\r\n    name : \"crop\",\r\n    ctor : CropPlugin\r\n  };\r\n\r\n  Imager.installPlugin(pluginInfo);\r\n\r\n  return pluginInfo;\r\n\r\n});\r\n"]}