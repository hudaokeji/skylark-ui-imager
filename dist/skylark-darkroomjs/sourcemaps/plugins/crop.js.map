{"version":3,"sources":["plugins/crop.js"],"names":["define","langx","noder","images","$","fabric","Darkroom","Crop","Transformation","inherit","applyTransformation","canvas","image","next","snapshot","Image","viewport","height","Math","abs","getScaledWidth","sin","get","PI","getScaledHeight","cos","width","computeImageViewPort","imageWidth","imageHeight","left","this","options","top","min","src","toDataURL","loaded","then","imgInstance","selectable","evented","lockMovementX","lockMovementY","lockRotation","lockScalingX","lockScalingY","lockUniScaling","hasControls","hasBorders","setWidth","setHeight","remove","add","CropZone","util","createClass","Rect","_render","ctx","callSuper","flipX","flipY","scaleX","scaleY","scale","_renderOverlay","undefined","setLineDash","mozDash","strokeStyle","_renderBorders","_renderGrid","lineDashOffset","x0","ceil","x1","x2","x3","y0","y1","y2","y3","beginPath","moveTo","lineTo","closePath","fill","stroke","pluginInfo","name","ctor","Plugin","startX","startY","isKeyCroping","isKeyLeft","isKeyUp","defaults","minHeight","minWidth","ratio","quickCropKey","init","overrided","buttonGroup","toolbar","createButtonGroup","cropButton","createButton","okButton","type","hide","cancelButton","addEventListener","toggleCrop","bind","cropCurrentZone","releaseFocus","on","onMouseDown","onMouseMove","onMouseUp","onObjectMoving","onObjectScaling","addListener","document","onKeyDown","onKeyUp","event","hasFocus","currentObject","target","cropZone","x","y","w","h","maxX","getWidth","maxY","getHeight","set","dispatchEvent","preventScaling","pointer","getPointer","e","minX","minY","lastScaleX","setScaleX","setLeft","lastScaleY","setScaleY","setTop","scaleToWidth","scaleToHeight","calcOffset","point","Point","getActiveObject","containsPoint","discardActiveObject","onMouseMoveKeyCrop","_renderCropZone","zone","max","setCoords","setActiveObject","keyCode","selectZone","forceDimension","requireFocus","bringToFront","originX","originY","cornerColor","cornerSize","transparentCorners","hasRotatingPoint","defaultCursor","active","fromX","fromY","toX","toY","isRight","isLeft","isDown","isUp","leftX","rightX","topY","bottomY","currentRatio","newWidth","newHeight","installPlugin"],"mappings":"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","file":"../../plugins/crop.js","sourcesContent":["define([\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-images\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-fabric\",\r\n  '../Darkroom',\r\n],function(langx,noder, images,$, fabric,Darkroom) {\r\n  'use strict';\r\n\r\n  function computeImageViewPort(image) {\r\n    //return {\r\n    //  height : image.height,\r\n    //  width : image.width\r\n    //};\r\n    return {\r\n      height: Math.abs(image.getScaledWidth() * (Math.sin(image.get(\"angle\") * Math.PI/180))) + Math.abs(image.getScaledHeight() * (Math.cos(image.get(\"angle\") * Math.PI/180))),\r\n      width: Math.abs(image.getScaledHeight() * (Math.sin(image.get(\"angle\") * Math.PI/180))) + Math.abs(image.getScaledWidth() * (Math.cos(image.get(\"angle\") * Math.PI/180))),\r\n    }\r\n  }\r\n  \r\n\r\n  var Crop = Darkroom.Transformation.inherit({\r\n    applyTransformation: function(canvas, image, next) {\r\n      // Snapshot the image delimited by the crop zone\r\n      var snapshot = new Image();\r\n\r\n      var viewport = computeImageViewPort(image);\r\n      var imageWidth = viewport.width;\r\n      var imageHeight = viewport.height;\r\n\r\n      var left = this.options.left * imageWidth;\r\n      var top = this.options.top * imageHeight;\r\n      var width = Math.min(this.options.width * imageWidth, imageWidth - left);\r\n      var height = Math.min(this.options.height * imageHeight, imageHeight - top);\r\n\r\n      snapshot.src = canvas.toDataURL({\r\n        left: left,\r\n        top: top,\r\n        width: width,\r\n        height: height,\r\n      });\r\n\r\n      images.loaded(snapshot).then(function() {\r\n        // Validate image\r\n        if (height < 1 || width < 1)\r\n          return;\r\n\r\n        var imgInstance = new fabric.Image(snapshot, {\r\n          // options to make the image static\r\n          selectable: false,\r\n          evented: false,\r\n          lockMovementX: true,\r\n          lockMovementY: true,\r\n          lockRotation: true,\r\n          lockScalingX: true,\r\n          lockScalingY: true,\r\n          lockUniScaling: true,\r\n          hasControls: false,\r\n          hasBorders: false\r\n        });\r\n\r\n        var width = snapshot.width;\r\n        var height = snapshot.height;\r\n\r\n        // Update canvas size\r\n        canvas.setWidth(width);\r\n        canvas.setHeight(height);\r\n\r\n        // Add image\r\n        canvas.remove(image);\r\n        canvas.add(imgInstance);\r\n\r\n        next(imgInstance);\r\n      });\r\n    }\r\n  });\r\n\r\n  var CropZone = fabric.util.createClass(fabric.Rect, {\r\n    _render: function(ctx) {\r\n      this.callSuper('_render', ctx);\r\n\r\n      var canvas = ctx.canvas;\r\n      var dashWidth = 7;\r\n\r\n      // Set original scale\r\n      var flipX = this.flipX ? -1 : 1;\r\n      var flipY = this.flipY ? -1 : 1;\r\n      var scaleX = flipX / this.scaleX;\r\n      var scaleY = flipY / this.scaleY;\r\n\r\n      ctx.scale(scaleX, scaleY);\r\n\r\n      // Overlay rendering\r\n      //ctx.fillStyle = 'rgba(0, 0, 0, 0.5)'; //modifeied by lwf\r\n      this._renderOverlay(ctx);\r\n\r\n      // Set dashed borders\r\n      if (ctx.setLineDash !== undefined)\r\n        ctx.setLineDash([dashWidth, dashWidth]);\r\n      else if (ctx.mozDash !== undefined)\r\n        ctx.mozDash = [dashWidth, dashWidth];\r\n\r\n      // First lines rendering with black\r\n      ctx.strokeStyle = 'rgba(0, 0, 0, 0.2)';\r\n      this._renderBorders(ctx);\r\n      this._renderGrid(ctx);\r\n\r\n      // Re render lines in white\r\n      ctx.lineDashOffset = dashWidth;\r\n      ctx.strokeStyle = 'rgba(255, 255, 255, 0.4)';\r\n      this._renderBorders(ctx);\r\n      this._renderGrid(ctx);\r\n\r\n      // Reset scale\r\n      ctx.scale(1/scaleX, 1/scaleY);\r\n    },\r\n\r\n    _renderOverlay: function(ctx) {\r\n      var canvas = ctx.canvas;\r\n\r\n      //\r\n      //    x0    x1        x2      x3\r\n      // y0 +------------------------+\r\n      //    |\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|\r\n      //    |\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|\r\n      // y1 +------+---------+-------+\r\n      //    |\\\\\\\\\\\\|         |\\\\\\\\\\\\\\|\r\n      //    |\\\\\\\\\\\\|    0    |\\\\\\\\\\\\\\|\r\n      //    |\\\\\\\\\\\\|         |\\\\\\\\\\\\\\|\r\n      // y2 +------+---------+-------+\r\n      //    |\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|\r\n      //    |\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|\r\n      // y3 +------------------------+\r\n      //\r\n\r\n      var x0 = Math.ceil(-this.getScaledWidth() / 2 - this.left);\r\n      var x1 = Math.ceil(-this.getScaledWidth() / 2);\r\n      var x2 = Math.ceil(this.getScaledWidth() / 2);\r\n      var x3 = Math.ceil(this.getScaledWidth() / 2 + (canvas.width - this.getScaledWidth() - this.left));\r\n\r\n      var y0 = Math.ceil(-this.getScaledHeight() / 2 - this.top);\r\n      var y1 = Math.ceil(-this.getScaledHeight() / 2);\r\n      var y2 = Math.ceil(this.getScaledHeight() / 2);\r\n      var y3 = Math.ceil(this.getScaledHeight() / 2 + (canvas.height - this.getScaledHeight() - this.top));\r\n\r\n      ctx.beginPath();\r\n      \r\n      // Draw outer rectangle.\r\n      // Numbers are +/-1 so that overlay edges don't get blurry.\r\n      ctx.moveTo(x0 - 1, y0 - 1);\r\n      ctx.lineTo(x3 + 1, y0 - 1);\r\n      ctx.lineTo(x3 + 1, y3 + 1);\r\n      ctx.lineTo(x0 - 1, y3 - 1);\r\n      ctx.lineTo(x0 - 1, y0 - 1);\r\n      ctx.closePath();\r\n\r\n      // Draw inner rectangle.\r\n      ctx.moveTo(x1, y1);\r\n      ctx.lineTo(x1, y2);\r\n      ctx.lineTo(x2, y2);\r\n      ctx.lineTo(x2, y1);\r\n      ctx.lineTo(x1, y1);\r\n\r\n      ctx.closePath();\r\n      ctx.fill();\r\n    },\r\n\r\n    _renderBorders: function(ctx) {\r\n      ctx.beginPath();\r\n      ctx.moveTo(-this.getScaledWidth()/2, -this.getScaledHeight()/2); // upper left\r\n      ctx.lineTo(this.getScaledWidth()/2, -this.getScaledHeight()/2); // upper right\r\n      ctx.lineTo(this.getScaledWidth()/2, this.getScaledHeight()/2); // down right\r\n      ctx.lineTo(-this.getScaledWidth()/2, this.getScaledHeight()/2); // down left\r\n      ctx.lineTo(-this.getScaledWidth()/2, -this.getScaledHeight()/2); // upper left\r\n      ctx.stroke();\r\n    },\r\n\r\n    _renderGrid: function(ctx) {\r\n      \r\n      // Vertical lines\r\n      ctx.beginPath();\r\n      ctx.moveTo(-this.getScaledWidth()/2 + 1/3 * this.getScaledWidth(), -this.getScaledHeight()/2);\r\n      ctx.lineTo(-this.getScaledWidth()/2 + 1/3 * this.getScaledWidth(), this.getScaledHeight()/2);\r\n      ctx.stroke();\r\n      ctx.beginPath();\r\n      ctx.moveTo(-this.getScaledWidth()/2 + 2/3 * this.getScaledWidth(), -this.getScaledHeight()/2);\r\n      ctx.lineTo(-this.getScaledWidth()/2 + 2/3 * this.getScaledWidth(), this.getScaledHeight()/2);\r\n      ctx.stroke();\r\n      // Horizontal lines\r\n      ctx.beginPath();\r\n      ctx.moveTo(-this.getScaledWidth()/2, -this.getScaledHeight()/2 + 1/3 * this.getScaledHeight());\r\n      ctx.lineTo(this.getScaledWidth()/2, -this.getScaledHeight()/2 + 1/3 * this.getScaledHeight());\r\n      ctx.stroke();\r\n      ctx.beginPath();\r\n      ctx.moveTo(-this.getScaledWidth()/2, -this.getScaledHeight()/2 + 2/3 * this.getScaledHeight());\r\n      ctx.lineTo(this.getScaledWidth()/2, -this.getScaledHeight()/2 + 2/3 * this.getScaledHeight());\r\n      ctx.stroke();\r\n    }\r\n  });\r\n\r\n  var CropPlugin = Darkroom.Plugin.inherit({\r\n    // Init point\r\n    startX: null,\r\n    startY: null,\r\n\r\n    // Keycrop\r\n    isKeyCroping: false,\r\n    isKeyLeft: false,\r\n    isKeyUp: false,\r\n\r\n    defaults: {\r\n      // min crop dimension\r\n      minHeight: 1,\r\n      minWidth: 1,\r\n      // ensure crop ratio\r\n      ratio: null,\r\n      // quick crop feature (set a key code to enable it)\r\n      quickCropKey: false\r\n    },\r\n\r\n     init : function(Darkroom,options) {\r\n      this.overrided(Darkroom,options);\r\n      var buttonGroup = this.Darkroom.toolbar.createButtonGroup();\r\n\r\n      this.cropButton = buttonGroup.createButton({\r\n        image: 'crop'\r\n      });\r\n      this.okButton = buttonGroup.createButton({\r\n        image: 'done',\r\n        type: 'success',\r\n        hide: true\r\n      });\r\n      this.cancelButton = buttonGroup.createButton({\r\n        image: 'close',\r\n        type: 'danger',\r\n        hide: true\r\n      });\r\n\r\n      // Buttons click\r\n      this.cropButton.addEventListener('click', this.toggleCrop.bind(this));\r\n      this.okButton.addEventListener('click', this.cropCurrentZone.bind(this));\r\n      this.cancelButton.addEventListener('click', this.releaseFocus.bind(this));\r\n\r\n      // Canvas events\r\n      this.Darkroom.canvas.on('mouse:down', this.onMouseDown.bind(this));\r\n      this.Darkroom.canvas.on('mouse:move', this.onMouseMove.bind(this));\r\n      this.Darkroom.canvas.on('mouse:up', this.onMouseUp.bind(this));\r\n      this.Darkroom.canvas.on('object:moving', this.onObjectMoving.bind(this));\r\n      this.Darkroom.canvas.on('object:scaling', this.onObjectScaling.bind(this));\r\n\r\n      fabric.util.addListener(document, 'keydown', this.onKeyDown.bind(this));\r\n      fabric.util.addListener(document, 'keyup', this.onKeyUp.bind(this));\r\n\r\n      this.Darkroom.addEventListener('core:transformation', this.releaseFocus.bind(this));\r\n    },\r\n\r\n    // Avoid crop zone to go beyond the canvas edges\r\n    onObjectMoving: function(event) {\r\n      if (!this.hasFocus()) {\r\n        return;\r\n      }\r\n\r\n      var currentObject = event.target;\r\n      if (currentObject !== this.cropZone)\r\n        return;\r\n\r\n      var canvas = this.Darkroom.canvas;\r\n      var x = currentObject.left, y = currentObject.top;\r\n      var w = currentObject.getScaledWidth(), h = currentObject.getScaledHeight();\r\n      var maxX = canvas.getWidth() - w;\r\n      var maxY = canvas.getHeight() - h;\r\n\r\n      if (x < 0)\r\n        currentObject.set('left', 0);\r\n      if (y < 0)\r\n        currentObject.set('top', 0);\r\n      if (x > maxX)\r\n        currentObject.set('left', maxX);\r\n      if (y > maxY)\r\n        currentObject.set('top', maxY);\r\n\r\n      this.Darkroom.dispatchEvent('crop:update');\r\n    },\r\n\r\n    // Prevent crop zone from going beyond the canvas edges (like mouseMove)\r\n    onObjectScaling: function(event) {\r\n      if (!this.hasFocus()) {\r\n        return;\r\n      }\r\n\r\n      var preventScaling = false;\r\n      var currentObject = event.target;\r\n      if (currentObject !== this.cropZone)\r\n        return;\r\n\r\n      var canvas = this.Darkroom.canvas;\r\n      var pointer = canvas.getPointer(event.e);\r\n      var x = pointer.x;\r\n      var y = pointer.y;\r\n\r\n      var minX = currentObject.left;\r\n      var minY = currentObject.top;\r\n      var maxX = currentObject.left + currentObject.getScaledWidth();\r\n      var maxY = currentObject.top + currentObject.getScaledHeight();\r\n\r\n      if (null !== this.options.ratio) {\r\n        if (minX < 0 || maxX > canvas.getWidth() || minY < 0 || maxY > canvas.getHeight()) {\r\n          preventScaling = true;\r\n        }\r\n      }\r\n\r\n      if (minX < 0 || maxX > canvas.getWidth() || preventScaling) {\r\n        var lastScaleX = this.lastScaleX || 1;\r\n        currentObject.setScaleX(lastScaleX);\r\n      }\r\n      if (minX < 0) {\r\n        currentObject.setLeft(0);\r\n      }\r\n\r\n      if (minY < 0 || maxY > canvas.getHeight() || preventScaling) {\r\n        var lastScaleY = this.lastScaleY || 1;\r\n        currentObject.setScaleY(lastScaleY);\r\n      }\r\n      if (minY < 0) {\r\n        currentObject.setTop(0);\r\n      }\r\n\r\n      if (currentObject.get(\"width\") < this.options.minWidth) {\r\n        currentObject.scaleToWidth(this.options.minWidth);\r\n      }\r\n      if (currentObject.get(\"height\") < this.options.minHeight) {\r\n        currentObject.scaleToHeight(this.options.minHeight);\r\n      }\r\n\r\n      this.lastScaleX = currentObject.get(\"scaleX\");\r\n      this.lastScaleY = currentObject.get(\"scaleY\");\r\n\r\n      this.Darkroom.dispatchEvent('crop:update');\r\n    },\r\n\r\n    // Init crop zone\r\n    onMouseDown: function(event) {\r\n      if (!this.hasFocus()) {\r\n        return;\r\n      }\r\n\r\n      var canvas = this.Darkroom.canvas;\r\n\r\n      // recalculate offset, in case canvas was manipulated since last `calcOffset`\r\n      canvas.calcOffset();\r\n      var pointer = canvas.getPointer(event.e);\r\n      var x = pointer.x;\r\n      var y = pointer.y;\r\n      var point = new fabric.Point(x, y);\r\n\r\n      // Check if user want to scale or drag the crop zone.\r\n      var activeObject = canvas.getActiveObject();\r\n      if (activeObject === this.cropZone || this.cropZone.containsPoint(point)) {\r\n        return;\r\n      }\r\n\r\n      canvas.discardActiveObject();\r\n      this.cropZone.set(\"width\",0);\r\n      this.cropZone.set(\"height\",0);\r\n      this.cropZone.set(\"scaleX\",1);\r\n      this.cropZone.set(\"scaleY\",1);\r\n\r\n      this.startX = x;\r\n      this.startY = y;\r\n    },\r\n\r\n    // Extend crop zone\r\n    onMouseMove: function(event) {\r\n      // Quick crop feature\r\n      if (this.isKeyCroping)\r\n        return this.onMouseMoveKeyCrop(event);\r\n\r\n      if (null === this.startX || null === this.startY) {\r\n        return;\r\n      }\r\n\r\n      var canvas = this.Darkroom.canvas;\r\n      var pointer = canvas.getPointer(event.e);\r\n      var x = pointer.x;\r\n      var y = pointer.y;\r\n\r\n      this._renderCropZone(this.startX, this.startY, x, y);\r\n    },\r\n\r\n    onMouseMoveKeyCrop: function(event) {\r\n      var canvas = this.Darkroom.canvas;\r\n      var zone = this.cropZone;\r\n\r\n      var pointer = canvas.getPointer(event.e);\r\n      var x = pointer.x;\r\n      var y = pointer.y;\r\n\r\n      if (!zone.left || !zone.top) {\r\n        zone.set(\"top\",y);\r\n        zone.set(\"left\",x);\r\n      }\r\n\r\n      this.isKeyLeft =  x < zone.left + zone.width / 2 ;\r\n      this.isKeyUp = y < zone.top + zone.height / 2 ;\r\n\r\n      this._renderCropZone(\r\n        Math.min(zone.left, x),\r\n        Math.min(zone.top, y),\r\n        Math.max(zone.left+zone.width, x),\r\n        Math.max(zone.top+zone.height, y)\r\n      );\r\n    },\r\n\r\n    // Finish crop zone\r\n    onMouseUp: function(event) {\r\n      if (null === this.startX || null === this.startY) {\r\n        return;\r\n      }\r\n\r\n      var canvas = this.Darkroom.canvas;\r\n      this.cropZone.setCoords();\r\n      canvas.setActiveObject(this.cropZone);\r\n      canvas.calcOffset();\r\n\r\n      this.startX = null;\r\n      this.startY = null;\r\n    },\r\n\r\n    onKeyDown: function(event) {\r\n      if (false === this.options.quickCropKey || event.keyCode !== this.options.quickCropKey || this.isKeyCroping)\r\n        return;\r\n\r\n      // Active quick crop flow\r\n      this.isKeyCroping = true ;\r\n      this.Darkroom.canvas.discardActiveObject();\r\n      this.cropZone.set(\"width\",0);\r\n      this.cropZone.set(\"height\",0);\r\n      this.cropZone.set(\"scaleX\",1);\r\n      this.cropZone.set(\"scaleY\",1);\r\n      this.cropZone.set(\"top\",0);\r\n      this.cropZone.set(\"left\",0);\r\n    },\r\n\r\n    onKeyUp: function(event) {\r\n      if (false === this.options.quickCropKey || event.keyCode !== this.options.quickCropKey || !this.isKeyCroping)\r\n        return;\r\n\r\n      // Unactive quick crop flow\r\n      this.isKeyCroping = false;\r\n      this.startX = 1;\r\n      this.startY = 1;\r\n      this.onMouseUp();\r\n    },\r\n\r\n    selectZone: function(x, y, width, height, forceDimension) {\r\n      if (!this.hasFocus())\r\n        this.requireFocus();\r\n\r\n      if (!forceDimension) {\r\n        this._renderCropZone(x, y, x+width, y+height);\r\n      } else {\r\n        this.cropZone.set({\r\n          'left': x,\r\n          'top': y,\r\n          'width': width,\r\n          'height': height\r\n        });\r\n      }\r\n\r\n      var canvas = this.Darkroom.canvas;\r\n      canvas.bringToFront(this.cropZone);\r\n      this.cropZone.setCoords();\r\n      canvas.setActiveObject(this.cropZone);\r\n      canvas.calcOffset();\r\n\r\n      this.Darkroom.dispatchEvent('crop:update');\r\n    },\r\n\r\n    toggleCrop: function() {\r\n      if (!this.hasFocus())\r\n        this.requireFocus();\r\n      else\r\n        this.releaseFocus();\r\n    },\r\n\r\n    cropCurrentZone: function() {\r\n      if (!this.hasFocus())\r\n        return;\r\n\r\n      // Avoid croping empty zone\r\n      if (this.cropZone.width < 1 && this.cropZone.height < 1)\r\n        return;\r\n\r\n      var image = this.Darkroom.image;\r\n\r\n      // Compute crop zone dimensions\r\n      var top = this.cropZone.get(\"top\") - image.get(\"top\");\r\n      var left = this.cropZone.get(\"left\") - image.get(\"left\");\r\n      var width = this.cropZone.get(\"width\");\r\n      var height = this.cropZone.get(\"height\");\r\n\r\n      // Adjust dimensions to image only\r\n      if (top < 0) {\r\n        height += top;\r\n        top = 0;\r\n      }\r\n\r\n      if (left < 0) {\r\n        width += left;\r\n        left = 0;\r\n      }\r\n\r\n      // Apply crop transformation.\r\n      // Make sure to use relative dimension since the crop will be applied\r\n      // on the source image.\r\n      this.Darkroom.applyTransformation(new Crop({\r\n        top: top / image.getScaledHeight(),\r\n        left: left / image.getScaledWidth(),\r\n        width: width / image.getScaledWidth(),\r\n        height: height / image.getScaledHeight(),\r\n      }));\r\n    },\r\n\r\n    // Test wether crop zone is set\r\n    hasFocus: function() {\r\n      return this.cropZone !== undefined;\r\n    },\r\n\r\n    // Create the crop zone\r\n    requireFocus: function() {\r\n      this.cropZone = new CropZone({\r\n        fill: 'transparent',\r\n        hasBorders: false,\r\n        originX: 'left',\r\n        originY: 'top',\r\n        //stroke: '#444',\r\n        //strokeDashArray: [5, 5],\r\n        //borderColor: '#444',\r\n        cornerColor: '#444',\r\n        cornerSize: 8,\r\n        transparentCorners: false,\r\n        lockRotation: true,\r\n        hasRotatingPoint: false,\r\n      });\r\n\r\n      if (null !== this.options.ratio) {\r\n        this.cropZone.set('lockUniScaling', true);\r\n      }\r\n\r\n      this.Darkroom.canvas.add(this.cropZone);\r\n      this.Darkroom.canvas.defaultCursor = 'crosshair';\r\n\r\n      this.cropButton.active(true);\r\n      this.okButton.hide(false);\r\n      this.cancelButton.hide(false);\r\n    },\r\n\r\n    // Remove the crop zone\r\n    releaseFocus: function() {\r\n      if (undefined === this.cropZone)\r\n        return;\r\n\r\n      this.cropZone.canvas.remove(this.cropZone);\r\n      this.cropZone = undefined;\r\n\r\n      this.cropButton.active(false);\r\n      this.okButton.hide(true);\r\n      this.cancelButton.hide(true);\r\n\r\n      this.Darkroom.canvas.defaultCursor = 'default';\r\n\r\n      this.Darkroom.dispatchEvent('crop:update');\r\n    },\r\n\r\n    _renderCropZone: function(fromX, fromY, toX, toY) {\r\n      var canvas = this.Darkroom.canvas;\r\n\r\n      var isRight = (toX > fromX);\r\n      var isLeft = !isRight;\r\n      var isDown = (toY > fromY);\r\n      var isUp = !isDown;\r\n\r\n      var minWidth = Math.min(+this.options.minWidth, canvas.getWidth());\r\n      var minHeight = Math.min(+this.options.minHeight, canvas.getHeight());\r\n\r\n      // Define corner coordinates\r\n      var leftX = Math.min(fromX, toX);\r\n      var rightX = Math.max(fromX, toX);\r\n      var topY = Math.min(fromY, toY);\r\n      var bottomY = Math.max(fromY, toY);\r\n\r\n      // Replace current point into the canvas\r\n      leftX = Math.max(0, leftX);\r\n      rightX = Math.min(canvas.getWidth(), rightX);\r\n      topY = Math.max(0, topY)\r\n      bottomY = Math.min(canvas.getHeight(), bottomY);\r\n\r\n      // Recalibrate coordinates according to given options\r\n      if (rightX - leftX < minWidth) {\r\n        if (isRight)\r\n          rightX = leftX + minWidth;\r\n        else\r\n          leftX = rightX - minWidth;\r\n      }\r\n      if (bottomY - topY < minHeight) {\r\n        if (isDown)\r\n          bottomY = topY + minHeight;\r\n        else\r\n          topY = bottomY - minHeight;\r\n      }\r\n\r\n      // Truncate truncate according to canvas dimensions\r\n      if (leftX < 0) {\r\n        // Translate to the left\r\n        rightX += Math.abs(leftX);\r\n        leftX = 0\r\n      }\r\n      if (rightX > canvas.getWidth()) {\r\n        // Translate to the right\r\n        leftX -= (rightX - canvas.getWidth());\r\n        rightX = canvas.getWidth();\r\n      }\r\n      if (topY < 0) {\r\n        // Translate to the bottom\r\n        bottomY += Math.abs(topY);\r\n        topY = 0\r\n      }\r\n      if (bottomY > canvas.getHeight()) {\r\n        // Translate to the right\r\n        topY -= (bottomY - canvas.getHeight());\r\n        bottomY = canvas.getHeight();\r\n      }\r\n\r\n      var width = rightX - leftX;\r\n      var height = bottomY - topY;\r\n      var currentRatio = width / height;\r\n\r\n      if (this.options.ratio && +this.options.ratio !== currentRatio) {\r\n        var ratio = +this.options.ratio;\r\n\r\n        if(this.isKeyCroping) {\r\n          isLeft = this.isKeyLeft;\r\n          isUp = this.isKeyUp;\r\n        }\r\n\r\n        if (currentRatio < ratio) {\r\n          var newWidth = height * ratio;\r\n          if (isLeft) {\r\n            leftX -= (newWidth - width);\r\n          }\r\n          width = newWidth;\r\n        } else if (currentRatio > ratio) {\r\n          var newHeight = height / (ratio * height/width);\r\n          if (isUp) {\r\n            topY -= (newHeight - height);\r\n          }\r\n          height = newHeight;\r\n        }\r\n\r\n        if (leftX < 0) {\r\n          leftX = 0;\r\n          //TODO\r\n        }\r\n        if (topY < 0) {\r\n          topY = 0;\r\n          //TODO\r\n        }\r\n        if (leftX + width > canvas.getWidth()) {\r\n          var newWidth = canvas.getWidth() - leftX;\r\n          height = newWidth * height / width;\r\n          width = newWidth;\r\n          if (isUp) {\r\n            topY = fromY - height;\r\n          }\r\n        }\r\n        if (topY + height > canvas.getHeight()) {\r\n          var newHeight = canvas.getHeight() - topY;\r\n          width = width * newHeight / height;\r\n          height = newHeight;\r\n          if (isLeft) {\r\n            leftX = fromX - width;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Apply coordinates\r\n      this.cropZone.left = leftX;\r\n      this.cropZone.top = topY;\r\n      this.cropZone.width = width;\r\n      this.cropZone.height = height;\r\n\r\n      this.Darkroom.canvas.bringToFront(this.cropZone);\r\n\r\n      this.Darkroom.dispatchEvent('crop:update');\r\n    }\r\n  });\r\n\r\n  var pluginInfo = {\r\n    name : \"crop\",\r\n    ctor : CropPlugin\r\n  };\r\n\r\n  Darkroom.installPlugin(pluginInfo);\r\n\r\n  return pluginInfo;\r\n\r\n});\r\n"]}