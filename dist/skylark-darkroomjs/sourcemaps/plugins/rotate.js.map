{"version":3,"sources":["plugins/rotate.js"],"names":["define","langx","noder","$","canvas2d","Imager","Rotation","Transformation","inherit","applyTransformation","canvas","image","next","width","height","angle","getAngle","this","options","rotate","Math","abs","getWidth","sin","PI","getHeight","cos","setWidth","setHeight","centerObject","setCoords","renderAll","pluginInfo","name","ctor","Plugin","init","imager","overrided","buttonGroup","toolbar","createButtonGroup","leftButton","createButton","rightButton","addEventListener","rotateLeft","bind","rotateRight","installPlugin"],"mappings":";;;;;;;AAAAA,QACE,sBACA,0BACA,0BACA,4BACA,aACA,SAASC,EAAMC,EAAOC,EAAGC,EAASC,GAClC,aAEF,IAAIC,EAAWD,EAAOE,eAAeC,SAEnCC,oBAAqB,SAASC,EAAQC,EAAOC,GAC3C,IAGIC,EAAOC,EAHPC,GAASJ,EAAMK,WAAaC,KAAKC,QAAQH,OAAS,IACtDJ,EAAMQ,OAAOJ,GAGbD,EAASM,KAAKC,IAAIV,EAAMW,WAAYF,KAAKG,IAAIR,EAAMK,KAAKI,GAAG,MAAOJ,KAAKC,IAAIV,EAAMc,YAAaL,KAAKM,IAAIX,EAAMK,KAAKI,GAAG,MACrHX,EAAQO,KAAKC,IAAIV,EAAMc,YAAaL,KAAKG,IAAIR,EAAMK,KAAKI,GAAG,MAAOJ,KAAKC,IAAIV,EAAMW,WAAYF,KAAKM,IAAIX,EAAMK,KAAKI,GAAG,MAEpHd,EAAOiB,SAASd,GAChBH,EAAOkB,UAAUd,GAEjBJ,EAAOmB,aAAalB,GACpBA,EAAMmB,YACNpB,EAAOqB,YAEPnB,OAqCEoB,GACFC,KAAO,SACPC,KAlCiB7B,EAAO8B,OAAO3B,SAC/B4B,KAAM,SAASC,EAAOnB,GACpBD,KAAKqB,UAAUD,EAAOnB,GACtB,IAAIqB,EAActB,KAAKoB,OAAOG,QAAQC,oBAElCC,EAAaH,EAAYI,cAC3BhC,MAAO,gBAGLiC,EAAcL,EAAYI,cAC5BhC,MAAO,iBAGT+B,EAAWG,iBAAiB,QAAS5B,KAAK6B,WAAWC,KAAK9B,OAC1D2B,EAAYC,iBAAiB,QAAS5B,KAAK+B,YAAYD,KAAK9B,QAG9D6B,WAAY,WACV7B,KAAKE,QAAQ,KAGf6B,YAAa,WACX/B,KAAKE,OAAO,KAGdA,OAAQ,SAAgBJ,GACtBE,KAAKoB,OAAO5B,oBACV,IAAIH,GAAUS,MAAOA,SAY3B,OAFAV,EAAO4C,cAAcjB,GAEdA","file":"../../plugins/rotate.js","sourcesContent":["define([\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/query\",\r\n  \"skylark-graphics-canvas2d\",\r\n  '../Imager',\r\n],function(langx,noder, $, canvas2d,Imager) {\r\n  'use strict';\r\n\r\nvar Rotation = Imager.Transformation.inherit({\r\n\r\n  applyTransformation: function(canvas, image, next) {\r\n    var angle = (image.getAngle() + this.options.angle) % 360;\r\n    image.rotate(angle);\r\n\r\n    var width, height;\r\n    height = Math.abs(image.getWidth()*(Math.sin(angle*Math.PI/180)))+Math.abs(image.getHeight()*(Math.cos(angle*Math.PI/180)));\r\n    width = Math.abs(image.getHeight()*(Math.sin(angle*Math.PI/180)))+Math.abs(image.getWidth()*(Math.cos(angle*Math.PI/180)));\r\n\r\n    canvas.setWidth(width);\r\n    canvas.setHeight(height);\r\n\r\n    canvas.centerObject(image);\r\n    image.setCoords();\r\n    canvas.renderAll();\r\n\r\n    next();\r\n  }\r\n});\r\n\r\n\r\n  var RotatePlugin = Imager.Plugin.inherit({\r\n    init: function(imager,options) {\r\n      this.overrided(imager,options);\r\n      var buttonGroup = this.imager.toolbar.createButtonGroup();\r\n\r\n      var leftButton = buttonGroup.createButton({\r\n        image: 'rotate-left'\r\n      });\r\n\r\n      var rightButton = buttonGroup.createButton({\r\n        image: 'rotate-right'\r\n      });\r\n\r\n      leftButton.addEventListener('click', this.rotateLeft.bind(this));\r\n      rightButton.addEventListener('click', this.rotateRight.bind(this));\r\n    },\r\n\r\n    rotateLeft: function() {\r\n      this.rotate(-90);\r\n    },\r\n\r\n    rotateRight: function() {\r\n      this.rotate(90);\r\n    },\r\n\r\n    rotate: function rotate(angle) {\r\n      this.imager.applyTransformation(\r\n        new Rotation({angle: angle})\r\n      );\r\n    }\r\n  });\r\n\r\n  var pluginInfo = {\r\n    name : \"rotate\",\r\n    ctor : RotatePlugin\r\n  };\r\n\r\n  Imager.installPlugin(pluginInfo);\r\n\r\n  return pluginInfo;\r\n\r\n});\r\n"]}